/*
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zendesk.sunshine_conversations_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * The message author.
 */
@ApiModel(description = "The message author.")
@JsonPropertyOrder({
  BusinessAllOf.JSON_PROPERTY_TYPE,
  BusinessAllOf.JSON_PROPERTY_SUBTYPES
})

public class BusinessAllOf {
  /**
   * The author type.
   */
  public enum TypeEnum {
    BUSINESS("business");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * Gets or Sets subtypes
   */
  public enum SubtypesEnum {
    AI("AI");

    private String value;

    SubtypesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubtypesEnum fromValue(String value) {
      for (SubtypesEnum b : SubtypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUBTYPES = "subtypes";
  private List<SubtypesEnum> subtypes = null;


  public BusinessAllOf type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The author type.
   * @return type
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The author type.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BusinessAllOf subtypes(List<SubtypesEnum> subtypes) {
    
    this.subtypes = subtypes;
    return this;
  }

  public BusinessAllOf addSubtypesItem(SubtypesEnum subtypesItem) {
    if (this.subtypes == null) {
      this.subtypes = new ArrayList<>();
    }
    this.subtypes.add(subtypesItem);
    return this;
  }

   /**
   * A string array that indicates the author&#39;s subtypes. Messages with an \&quot;AI\&quot; subtype are generated by AI  and a disclaimer is appended to the text of the message sent to the customer. For third-party channels,  the disclaimer is applied for image, file, and text message types. 
   * @return subtypes
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "A string array that indicates the author's subtypes. Messages with an \"AI\" subtype are generated by AI  and a disclaimer is appended to the text of the message sent to the customer. For third-party channels,  the disclaimer is applied for image, file, and text message types. ")
  @JsonProperty(JSON_PROPERTY_SUBTYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SubtypesEnum> getSubtypes() {
    return subtypes;
  }


  public void setSubtypes(List<SubtypesEnum> subtypes) {
    this.subtypes = subtypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessAllOf businessAllOf = (BusinessAllOf) o;
    return Objects.equals(this.type, businessAllOf.type) &&
        Objects.equals(this.subtypes, businessAllOf.subtypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, subtypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessAllOf {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subtypes: ").append(toIndentedString(subtypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

