/*
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 14.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zendesk.sunshine_conversations_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zendesk.sunshine_conversations_client.model.ActionSubset;
import com.zendesk.sunshine_conversations_client.model.CarouselMessage;
import com.zendesk.sunshine_conversations_client.model.CarouselMessageDisplaySettings;
import com.zendesk.sunshine_conversations_client.model.FileMessage;
import com.zendesk.sunshine_conversations_client.model.FormMessage;
import com.zendesk.sunshine_conversations_client.model.FormResponseMessage;
import com.zendesk.sunshine_conversations_client.model.FormResponseMessageField;
import com.zendesk.sunshine_conversations_client.model.ImageMessage;
import com.zendesk.sunshine_conversations_client.model.Item;
import com.zendesk.sunshine_conversations_client.model.ListMessage;
import com.zendesk.sunshine_conversations_client.model.LocationMessage;
import com.zendesk.sunshine_conversations_client.model.LocationMessageCoordinates;
import com.zendesk.sunshine_conversations_client.model.LocationMessageLocation;
import com.zendesk.sunshine_conversations_client.model.TemplateMessage;
import com.zendesk.sunshine_conversations_client.model.TextMessage;
import java.math.BigDecimal;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Content
 */
@JsonPropertyOrder({
  Content.JSON_PROPERTY_TYPE,
  Content.JSON_PROPERTY_TEXT,
  Content.JSON_PROPERTY_ACTIONS,
  Content.JSON_PROPERTY_PAYLOAD,
  Content.JSON_PROPERTY_ITEMS,
  Content.JSON_PROPERTY_DISPLAY_SETTINGS,
  Content.JSON_PROPERTY_MEDIA_URL,
  Content.JSON_PROPERTY_MEDIA_SIZE,
  Content.JSON_PROPERTY_MEDIA_TYPE,
  Content.JSON_PROPERTY_ALT_TEXT,
  Content.JSON_PROPERTY_ATTACHMENT_ID,
  Content.JSON_PROPERTY_SUBMITTED,
  Content.JSON_PROPERTY_BLOCK_CHAT_INPUT,
  Content.JSON_PROPERTY_FIELDS,
  Content.JSON_PROPERTY_TEXT_FALLBACK,
  Content.JSON_PROPERTY_COORDINATES,
  Content.JSON_PROPERTY_LOCATION,
  Content.JSON_PROPERTY_TEMPLATE
})

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CarouselMessage.class, name = "carousel"),
  @JsonSubTypes.Type(value = FileMessage.class, name = "file"),
  @JsonSubTypes.Type(value = FormMessage.class, name = "form"),
  @JsonSubTypes.Type(value = FormResponseMessage.class, name = "formResponse"),
  @JsonSubTypes.Type(value = ImageMessage.class, name = "image"),
  @JsonSubTypes.Type(value = ListMessage.class, name = "list"),
  @JsonSubTypes.Type(value = LocationMessage.class, name = "location"),
  @JsonSubTypes.Type(value = TemplateMessage.class, name = "template"),
  @JsonSubTypes.Type(value = TextMessage.class, name = "text"),
  @JsonSubTypes.Type(value = CarouselMessage.class, name = "carouselMessage"),
  @JsonSubTypes.Type(value = FileMessage.class, name = "fileMessage"),
  @JsonSubTypes.Type(value = FormMessage.class, name = "formMessage"),
  @JsonSubTypes.Type(value = FormResponseMessage.class, name = "formResponseMessage"),
  @JsonSubTypes.Type(value = ImageMessage.class, name = "imageMessage"),
  @JsonSubTypes.Type(value = ListMessage.class, name = "listMessage"),
  @JsonSubTypes.Type(value = LocationMessage.class, name = "locationMessage"),
  @JsonSubTypes.Type(value = TemplateMessage.class, name = "templateMessage"),
  @JsonSubTypes.Type(value = TextMessage.class, name = "textMessage"),
})

public class Content {
  public static final String JSON_PROPERTY_TYPE = "type";
  protected String type = "template";

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public static final String JSON_PROPERTY_ACTIONS = "actions";
  private List<ActionSubset> actions = null;

  public static final String JSON_PROPERTY_PAYLOAD = "payload";
  private String payload;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<Item> items = new ArrayList<>();

  public static final String JSON_PROPERTY_DISPLAY_SETTINGS = "displaySettings";
  private CarouselMessageDisplaySettings displaySettings;

  public static final String JSON_PROPERTY_MEDIA_URL = "mediaUrl";
  private URI mediaUrl;

  public static final String JSON_PROPERTY_MEDIA_SIZE = "mediaSize";
  private BigDecimal mediaSize;

  public static final String JSON_PROPERTY_MEDIA_TYPE = "mediaType";
  private String mediaType;

  public static final String JSON_PROPERTY_ALT_TEXT = "altText";
  private String altText;

  public static final String JSON_PROPERTY_ATTACHMENT_ID = "attachmentId";
  private String attachmentId;

  public static final String JSON_PROPERTY_SUBMITTED = "submitted";
  private Boolean submitted;

  public static final String JSON_PROPERTY_BLOCK_CHAT_INPUT = "blockChatInput";
  private Boolean blockChatInput;

  public static final String JSON_PROPERTY_FIELDS = "fields";
  private List<FormResponseMessageField> fields = new ArrayList<>();

  public static final String JSON_PROPERTY_TEXT_FALLBACK = "textFallback";
  private String textFallback;

  public static final String JSON_PROPERTY_COORDINATES = "coordinates";
  private LocationMessageCoordinates coordinates;

  public static final String JSON_PROPERTY_LOCATION = "location";
  private LocationMessageLocation location;

  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private Object template;


  public Content type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of message.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of message.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


   /**
   * The fallback text message used when location messages are not supported by the channel.
   * @return text
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The fallback text message used when location messages are not supported by the channel.")
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }




  public Content actions(List<ActionSubset> actions) {
    
    this.actions = actions;
    return this;
  }

   /**
   * An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
   * @return actions
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "An array of objects representing the actions associated with the message. The array length is limited by the third party channel.")
  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ActionSubset> getActions() {
    return actions;
  }


  public void setActions(List<ActionSubset> actions) {
    this.actions = actions;
  }


  public Content payload(String payload) {
    
    this.payload = payload;
    return this;
  }

   /**
   * The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
   * @return payload
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.")
  @JsonProperty(JSON_PROPERTY_PAYLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayload() {
    return payload;
  }


  public void setPayload(String payload) {
    this.payload = payload;
  }


  public Content items(List<Item> items) {
    
    this.items = items;
    return this;
  }

   /**
   * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
   * @return items
  **/
  @ApiModelProperty(required = true, value = "An array of objects representing the items associated with the message. Only present in carousel and list type messages.")
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Item> getItems() {
    return items;
  }


  public void setItems(List<Item> items) {
    this.items = items;
  }


  public Content displaySettings(CarouselMessageDisplaySettings displaySettings) {
    
    this.displaySettings = displaySettings;
    return this;
  }

   /**
   * Get displaySettings
   * @return displaySettings
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DISPLAY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CarouselMessageDisplaySettings getDisplaySettings() {
    return displaySettings;
  }


  public void setDisplaySettings(CarouselMessageDisplaySettings displaySettings) {
    this.displaySettings = displaySettings;
  }


  public Content mediaUrl(URI mediaUrl) {
    
    this.mediaUrl = mediaUrl;
    return this;
  }

   /**
   * The URL for media, such as an image, attached to the message. &lt;aside class&#x3D;\&quot;notice\&quot;&gt;Note that for private attachments an authorization header is required to access the mediaUrl. See &lt;a href&#x3D;\&quot;https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/\&quot;&gt;Configuring private attachments for messaging&lt;/a&gt; guide for more details.&lt;/aside&gt; 
   * @return mediaUrl
  **/
  @ApiModelProperty(required = true, value = "The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See <a href=\"https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/\">Configuring private attachments for messaging</a> guide for more details.</aside> ")
  @JsonProperty(JSON_PROPERTY_MEDIA_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getMediaUrl() {
    return mediaUrl;
  }


  public void setMediaUrl(URI mediaUrl) {
    this.mediaUrl = mediaUrl;
  }


   /**
   * The size of the media in bytes.
   * @return mediaSize
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The size of the media in bytes.")
  @JsonProperty(JSON_PROPERTY_MEDIA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMediaSize() {
    return mediaSize;
  }




   /**
   * The type of media.
   * @return mediaType
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "The type of media.")
  @JsonProperty(JSON_PROPERTY_MEDIA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMediaType() {
    return mediaType;
  }




  public Content altText(String altText) {
    
    this.altText = altText;
    return this;
  }

   /**
   * An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
   * @return altText
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.")
  @JsonProperty(JSON_PROPERTY_ALT_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAltText() {
    return altText;
  }


  public void setAltText(String altText) {
    this.altText = altText;
  }


  public Content attachmentId(String attachmentId) {
    
    this.attachmentId = attachmentId;
    return this;
  }

   /**
   * An identifier used by Sunshine Conversations for internal purposes.
   * @return attachmentId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "An identifier used by Sunshine Conversations for internal purposes.")
  @JsonProperty(JSON_PROPERTY_ATTACHMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAttachmentId() {
    return attachmentId;
  }


  public void setAttachmentId(String attachmentId) {
    this.attachmentId = attachmentId;
  }


   /**
   * Flag which states whether the form is submitted.
   * @return submitted
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "Flag which states whether the form is submitted.")
  @JsonProperty(JSON_PROPERTY_SUBMITTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSubmitted() {
    return submitted;
  }




  public Content blockChatInput(Boolean blockChatInput) {
    
    this.blockChatInput = blockChatInput;
    return this;
  }

   /**
   * true if the message should block the chat input on Web Messenger.
   * @return blockChatInput
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "true if the message should block the chat input on Web Messenger.")
  @JsonProperty(JSON_PROPERTY_BLOCK_CHAT_INPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBlockChatInput() {
    return blockChatInput;
  }


  public void setBlockChatInput(Boolean blockChatInput) {
    this.blockChatInput = blockChatInput;
  }


  public Content fields(List<FormResponseMessageField> fields) {
    
    this.fields = fields;
    return this;
  }

   /**
   * Array of field objects that contain the submitted fields.
   * @return fields
  **/
  @ApiModelProperty(required = true, value = "Array of field objects that contain the submitted fields.")
  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<FormResponseMessageField> getFields() {
    return fields;
  }


  public void setFields(List<FormResponseMessageField> fields) {
    this.fields = fields;
  }


   /**
   * A string containing the &#x60;label: value&#x60; of all fields, each separated by a newline character.
   * @return textFallback
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "A string containing the `label: value` of all fields, each separated by a newline character.")
  @JsonProperty(JSON_PROPERTY_TEXT_FALLBACK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTextFallback() {
    return textFallback;
  }




  public Content coordinates(LocationMessageCoordinates coordinates) {
    
    this.coordinates = coordinates;
    return this;
  }

   /**
   * Get coordinates
   * @return coordinates
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_COORDINATES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocationMessageCoordinates getCoordinates() {
    return coordinates;
  }


  public void setCoordinates(LocationMessageCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  public Content location(LocationMessageLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocationMessageLocation getLocation() {
    return location;
  }


  public void setLocation(LocationMessageLocation location) {
    this.location = location;
  }


  public Content template(Object template) {
    
    this.template = template;
    return this;
  }

   /**
   * The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). &#x60;schema&#x60; must be set to &#x60;whatsapp&#x60;.
   * @return template
  **/
  @ApiModelProperty(required = true, value = "The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.")
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTemplate() {
    return template;
  }


  public void setTemplate(Object template) {
    this.template = template;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Content content = (Content) o;
    return Objects.equals(this.type, content.type)Objects.equals(this.text, content.text)Objects.equals(this.actions, content.actions)Objects.equals(this.payload, content.payload)Objects.equals(this.items, content.items)Objects.equals(this.displaySettings, content.displaySettings)Objects.equals(this.mediaUrl, content.mediaUrl)Objects.equals(this.mediaSize, content.mediaSize)Objects.equals(this.mediaType, content.mediaType)Objects.equals(this.altText, content.altText)Objects.equals(this.attachmentId, content.attachmentId)Objects.equals(this.submitted, content.submitted)Objects.equals(this.blockChatInput, content.blockChatInput)Objects.equals(this.fields, content.fields)Objects.equals(this.textFallback, content.textFallback)Objects.equals(this.coordinates, content.coordinates)Objects.equals(this.location, content.location)Objects.equals(this.template, content.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typetextactionspayloaditemsdisplaySettingsmediaUrlmediaSizemediaTypealtTextattachmentIdsubmittedblockChatInputfieldstextFallbackcoordinateslocationtemplate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Content {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    displaySettings: ").append(toIndentedString(displaySettings)).append("\n");
    sb.append("    mediaUrl: ").append(toIndentedString(mediaUrl)).append("\n");
    sb.append("    mediaSize: ").append(toIndentedString(mediaSize)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    altText: ").append(toIndentedString(altText)).append("\n");
    sb.append("    attachmentId: ").append(toIndentedString(attachmentId)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    blockChatInput: ").append(toIndentedString(blockChatInput)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    textFallback: ").append(toIndentedString(textFallback)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

