apply plugin: 'maven-publish'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'signing'

group = 'com.zendesk'
version = '16.0.0'

def calculateSnapshotVersion() {
    def sha = "git rev-parse --short HEAD".execute(null, project.rootDir).text.trim()
    return "${project.version}-${sha}-SNAPSHOT"
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["snapshotVersion"] = calculateSnapshotVersion()

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('MAVEN_SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('MAVEN_SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('MAVEN_SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('MAVEN_OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('MAVEN_OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

repositories {
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

task copyDeps(type: Copy) {
  from configurations.runtime
  into 'build/lib'
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 23
        buildToolsVersion '23.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 23
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided 'jakarta.annotation-api:2.1.1'
            provided 'jakarta.ws.rs-api:3.1.0'
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java'
    apply plugin: 'maven'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    install {
        repositories.mavenInstaller {
            pom.artifactId = 'sunshine-conversations-client'
        }
    }

    task execute(type:JavaExec) {
       main = System.getProperty('mainClass')
       classpath = sourceSets.main.runtimeClasspath
    }
}

ext {
    swagger_annotations_version = "1.5.22"
    jackson_version = "2.14.3"
    jackson_databind_version = "2.14.3"
    jackson_databind_nullable_version = "0.2.2"
    threetenbp_version = "2.15.2"
    resteasy_version = "6.2.4.Final"
    junit_version = "5.9.2"
}

dependencies {
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "com.google.code.findbugs:jsr305:3.0.2"
    compile "org.jboss.resteasy:resteasy-client:$resteasy_version"
    compile "org.jboss.resteasy:resteasy-multipart-provider:$resteasy_version"
    compile "org.jboss.resteasy:resteasy-jackson2-provider:$resteasy_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    compile "com.github.joschi.jackson:jackson-datatype-threetenbp:$threetenbp_version"
    compile "org.openapitools:jackson-databind-nullable:$jackson_databind_nullable_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    testCompile "junit:junit:$junit_version"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom.withXml {
                asNode().appendNode('name', 'sunshine-conversations-client')
                asNode().appendNode('description', 'Sunshine Conversations Client')
                asNode().appendNode('url', 'https://zendesk.com')
                asNode().appendNode('scm').
                    appendNode('connection', 'https://github.com/zendesk/sunshine-conversations-java').parent().
                    appendNode('developerConnection', 'https://github.com/zendesk/sunshine-conversations-java').parent().
                    appendNode('url', 'https://github.com/zendesk/sunshine-conversations-java')
                asNode().appendNode('licenses').appendNode('license').
                        appendNode('name', 'Apache-2.0').parent().
                        appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html').parent().
                        appendNode('distribution', 'repo')
                asNode().appendNode('developers').appendNode('developer').
                        appendNode('name', 'Sunshine Conversations Engine').parent().
                        appendNode('email', 'sunco-eng-conversation-engine@zendesk.com').parent().
                        appendNode('organization', 'Sunshine Conversations Zendesk').parent().
                        appendNode('organizationUrl', 'smooch.io')
              }
        }

        zdArtifactory(MavenPublication) {
          from components.java
          groupId = 'com.zendesk'
          artifactId = 'sunshine-conversations-client'
          version = snapshotVersion
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }

        maven {
          name = "zendeskArtifactory"
          url = "https://zdrepo.jfrog.io/zdrepo/libs-snapshots-local"
          credentials {
              username System.env.ARTIFACTORY_USERNAME
              password System.env.ARTIFACTORY_API_KEY
          }
        }
    }
}

signing {
    sign publishing.publications
}

tasks.withType(Sign) {
    onlyIf { project.getProperties().get("disableSigning") != "true" }
}

task publishSnapshotToZendeskArtifactory {
    dependsOn tasks.named('publishZdArtifactoryPublicationToZendeskArtifactoryRepository')
    description = 'Publish to the Zendesk artifactory'

    doLast {
        println("Published snapshot version: " + snapshotVersion)
    }
}
