openapi: 3.0.2
info:
  description: "# Introduction\n\n<aside class=\"notice\">As a stepping stone to new\
    \ and greater things, we’ve updated Sunshine Conversations API to v2. For users\
    \ wanting to access v1, please proceed <a href=\"https://docs.smooch.io/rest/v1\"\
    >here</a>. \n</aside>\n\nWelcome to the Sunshine Conversations API. The API allows\
    \ you to craft entirely unique messaging experiences for your app and website\
    \ as well as talk to any backend or external service.\n\nThe Sunshine Conversations\
    \ API is designed according to REST principles. The API accepts JSON in request\
    \ bodies and requires that the content-type: application/json header be specified\
    \ for\nall such requests. The API will always respond with an object. Depending\
    \ on context, resources may be returned as single objects or as arrays of objects,\
    \ nested within the response object.\n\nIn some cases, the API will also facilitate\
    \ cross-origin resource sharing so that it can be called from a web application.\n\
    \n<aside class=\"notice\">Note that for authenticated requests, cross-origin resource\
    \ sharing is only available to appUser scoped credentials. Attempting to call\
    \ the API from the browser using \napp or account scoped credentials will result\
    \ in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\
    >same-origin policy</a> browser error. For more information, refer \nto the <a\
    \ href=\"http://docs.smooch.io/guide/authorization/#handle-credentials-with-caution\"\
    >Authorization guide</a>.</aside>\n\n## Regions\n\nIf you are a licensed Zendesk\
    \ customer, use the following API host:\n\n`https://<subdomain>.zendesk.com/sc`\n\
    \nIf you are not a licensed Zendesk customer, the API host is available in the\
    \ following regions in order to meet your organization’s residency requirements.\n\
    \n| Region         | Host                       |\n| -------------- | --------------------------\
    \ |\n| United States  | https://api.smooch.io      |\n| European Union | https://api.eu-1.smooch.io\
    \ |\n\nFor more information, see [Regions](/guide/regions/).\n\n<aside class=\"\
    notice\">When configuring an API host, make sure to always use `https`. Some API\
    \ clients can have unexpected behaviour when following redirects from `http` to\
    \ `https`.</aside>\n\n## Errors\n\nSunshine Conversations uses standard HTTP status\
    \ codes to communicate errors. In general, a `2xx` status code indicates success\
    \ while `4xx` indicates an error, in which case, the response body includes a\
    \ JSON object which includes an array of errors, with a text `code` and `title`\
    \ containing more details. Multiple errors can only be included in a `400 Bad\
    \ Request`. A `5xx` status code indicates that something went wrong on our end.\n\
    \n```javascript\n{\n   \"errors\":  [\n    {\n        \"code\": \"unauthorized\"\
    ,\n        \"title\": \"Authorization is required\"\n    }\n   ]\n}\n```\n\n##\
    \ API Version\n\nThe latest version of the API is v2. Version v1.1 is still supported\
    \ and you can continue using it but we encourage you to upgrade to the latest\
    \ version. To learn more about API versioning at Sunshine Conversations, including\
    \ instructions on how to upgrade to the latest version, [visit our docs](https://docs.smooch.io/guide/versioning).\n\
    \n## API Pagination and Records Limits\n\nAll paginated endpoints support cursor-based\
    \ pagination.\n\n### Cursor Pagination\n\nCursor-based pagination is a common\
    \ pagination strategy that avoids many of the pitfalls of offset–limit pagination.\
    \ It works by returning a pointer to a specific item in the dataset. On subsequent\
    \ requests, the server returns results after the given pointer.\n\nA `page[after]`\
    \ or `page[before]` query string parameter may be provided, they are cursors pointing\
    \ to a record id.\n\nThe `page[after]` cursor indicates that only records **subsequent**\
    \ to it should be returned.\n\nThe `page[before]` cursor indicates that only records\
    \ **preceding** it should be returned.\n\n**Only one** of `page[after]` or `page[before]`\
    \ may be provided in a query, not both.\n\nIn most endpoints, an optional `page[size]`\
    \ query parameter may be passed to control the number of records returned by the\
    \ request.\n\n## API Libraries\n\nSunshine Conversations provides an official\
    \ API library for [Java](https://github.com/zendesk/sunshine-conversations-java),\
    \ with more languages to come. These helpful libraries wrap calls to the API and\
    \ can make interfacing with Sunshine Conversations easier.\n\n## Postman Collection\n\
    \n<a style=\"display:inline-block;background:url(https://run.pstmn.io/button.svg);height:30px;width:\
    \ 123px;\" href=\"https://docs.smooch.io/sunco-openapi/postman_collection.json\"\
    ></a>\n\nIn addition to API libraries, Sunshine Conversations also has a Postman\
    \ collection that can be used for development or testing purposes. See the [guide](https://docs.smooch.io/guide/postman-collection/)\
    \ for information on how to install and use the collection in your Postman client.\n\
    \n## Rate Limits\n\nSunshine Conversations APIs are subject to rate limiting.\
    \ If the rate limit is exceeded Sunshine Conversations may return a `429 Too Many\
    \ Requests` HTTP status code. We apply rate limits to prevent abuse, spam, denial-of-service\
    \ attacks, and similar issues. Our goal is to keep the limits high enough so that\
    \ any application using Sunshine Conversations as intended will not encounter\
    \ them. However usage spikes do occur and encountering a rate limit may be unavoidable.\
    \ In order to avoid production outages, when calling the Sunshine Conversations\
    \ API you should implement `429` retry logic using exponential backoff and jitter.\n\
    \nIf your use case involves making API calls in bulk, please [contact us](https://smooch.io/contact).\n\
    \n## Conversation Size Limits\n\nConversations are limited to 30,000 messages.\
    \ Once you reach this maximum, a `423 Locked` HTTP status code is returned when\
    \ trying to post a new message. To allow more messages to be sent to the affected\
    \ conversation, you must [delete all messages](https://docs.smooch.io/rest/#operation/deleteAllMessages)\
    \ to make room.\n\nIf your use case involves conversations that could exceed this\
    \ limit, please [contact us](https://smooch.io/contact). We will not extend your\
    \ limit, but we want to understand your use case better.\n\n## Request Size Limits\n\
    \nThe Sunshine Conversations API imposes the following size limits on HTTP requests:\n\
    \n| Request Type | Limit |\n| ------------ | ----- |\n| JSON         | 100kb |\n\
    | File upload  | 50mb  |\n\n## Authorization\n\nThis is an overview of how authorization\
    \ works with the Sunshine Conversations API. Sunshine Conversations allows basic\
    \ authentication or JSON Web Tokens (JWTs) as authentication methods for server-to-server\
    \ calls. [See below](#authentication) for more details.\nThere are two different\
    \ authorization scopes available - app and account.\n\n| Scope   | Authorized\
    \ Methods                       |\n| ------- | ----------------------------------------\
    \ |\n| app     | All methods besides Account Provisioning |\n| account | All methods\
    \                              |\n\nThe app scope can be used to access any of\
    \ the Sunshine Conversations APIs, besides account provisioning methods, on behalf\
    \ of a single app, or any app user related to that app. The account scope can\
    \ be used to access any of the Sunshine Conversations and Account Provisioning\
    \ APIs on behalf of the account owner, any app belonging to the account, or any\
    \ app user related to those apps.\n\n<aside class=\"notice\">An additional scope\
    \ of `appUser` can also be used to authenticate users when using one of the Sunshine\
    \ Conversations native SDK integrations. For information on how and when to use\
    \ this scope, see the guide for <a href=\"https://docs.smooch.io/guide/authenticating-users/\"\
    >authenticating users.</a></aside>\n\n## Authentication\n\nTo authenticate requests\
    \ to the API, you will need an API key, composed of a key id and a secret.\nFor\
    \ an overview of how authentication works in Sunshine Conversations and instructions\
    \ on how to generate an API key, see the guide.\nAPI requests can be authenticated\
    \ in two ways:\n\n- With Basic authentication you can make requests using an API\
    \ key directly.\n- With JSON Web Tokens (JWTs) you sign tokens with an API key,\
    \ which are then used to authenticate with the API. See [When to Use JWTs?](https://docs.smooch.io/guide/jwt/#when-to-use-jwts)\
    \ to learn if JWTs are relevant for your usage.\n- Before using an API key in\
    \ production, make sure to familiarize yourself with best practices on how to\
    \ [securely handle credentials](https://docs.smooch.io/guide/authentication-secure-credential-handling/).\n\
    \n### Basic Authentication\n\nAPI requests can be authenticated with [basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\
    \ using an API key. The key id is used as the username and the secret as the password.\
    \ The scope of access is determined by the owner of the API key. See the [guide](https://docs.smooch.io/guide/basic-authentication/#scope-of-access)\
    \ for more details.\n\n### JWTs\n\nJSON Web Tokens (JWTs) are an industry standard\
    \ authentication method. The full specification is described [here](https://tools.ietf.org/html/rfc7519),\
    \ and a set of supported JWT libraries for a variety of languages and platforms\
    \ can be found at http://jwt.io. To summarize, a JWT is composed of a header,\
    \ a payload, and a signature. The payload contains information called claims which\
    \ describe the subject to whom the token was issued.\nThe JWT itself is transmitted\
    \ via the HTTP `authorization` header. The token should be prefixed with “Bearer”\
    \ followed by a space. For example: `Bearer your-jwt`.\nTo generate a JWT, you\
    \ need an API key, which is composed of a key ID and a secret. The key ID is included\
    \ in a JWT’s header, as the `kid` property, while the secret is used to sign the\
    \ JWT.\nFor more in-depth coverage, see the [guide](https://docs.smooch.io/guide/jwt).\n\
    \n#### Header\n\nThe JWT header must contain the key id (kid) of the API key that\
    \ is used to sign it. The algorithm (alg) used should be HS256. Unsigned JWTs\
    \ are not accepted.\n\n```javascript\n{\n    \"alg\": \"HS256\",\n    \"typ\"\
    : \"JWT\",\n    \"kid\": \"act_5963ceb97cde542d000dbdb1\"\n}\n```\n\n#### Payload\n\
    \nThe JWT payload must include a scope claim which specifies the caller’s scope\
    \ of access.\n\n- account-scoped JWTs must be generated with an API key associated\
    \ with a Sunshine Conversations account (act*) or service account (svc*).\n\n\
    ```javascript\n{\n    \"scope\": \"account\"\n}\n```\n\n- app-scoped JWTs can\
    \ be generated with an API key associated with an app (app\\_).\n\n```javascript\n\
    {\n   \"scope\": \"app\"\n}\n```\n"
  termsOfService: https://www.zendesk.com/company/customers-partners/master-subscription-agreement/
  title: Sunshine Conversations API
  version: 12.6.2
  x-logo:
    url: sunco_logo.svg
    altText: Sunshine Conversations
    href: https://docs.smooch.io/
servers:
- description: United States server
  url: https://api.smooch.io
- description: European Union server
  url: https://api.eu-1.smooch.io
security:
- bearerAuth:
  - app
  - account
- basicAuth:
  - app
  - account
tags:
- description: "If you’re looking to enable messaging inside your product for your\
    \ customers, with as much control over the experience as you’d like, you can create\
    \ and control Sunshine Conversations apps programmatically using [Account Provisioning](https://docs.smooch.io/guide/intro-to-account-provisioning/).\n\
    ### Authentication\nAccount Provisioning endpoints require `account` scope. See\
    \ the [authorization](#authorization) and [authentication](#authentication) sections\
    \ for information.\nA user account API key (key id that starts with `act_`) can\
    \ access all account provisioning routes. You can create an account key by going\
    \ to your account page.\nA service account API key (key id that starts with `svc_`)\
    \ may be used to manage apps, but not service accounts or service account keys.\n\
    \n| Key Type       | Authorized Methods                                      \
    \          |\n| -------------- | -----------------------------------------------------------------\
    \ |\n| act            | All Core and Account Provisioning methods.           \
    \             |\n| svc   \t       | All Core methods, App Management methods,\
    \ and App Keys methods.   |\n\n### Service Accounts\nService Account schema and\
    \ endpoints used for provisioning service accounts. A service account represents\
    \ an API user, with its own set of credentials, that has only access to a certain\
    \ subset of apps. For software makers that create apps on behalf of separate customers\
    \ or businesses, service accounts can be used to generate and distribute credentials\
    \ that only have access to a single business's data.\n\n### App settings\nApps\
    \ have a number of optional settings that can be used to customize specific behaviors.\
    \ See\nthe `settings` object described below for more information.\n"
  name: Apps
  x-displayName: Apps
- description: This set of endpoints is used to provision and revoke API keys for
    a Sunshine Conversations app. An app can have a maximum of 10 keys.
  name: App Keys
  x-displayName: App Keys
- description: |
    You can upload files of any type that can then be used to send a file, image or carousel message to a user.

    ## Attachments for Messages
    The attachments API allows you to upload a file for the purpose of sending a message.
    Using the for parameter, you can signal to Sunshine Conversations that your upload will be used to send a message to a user.
    Knowing this, Sunshine Conversations will safely delete the attachment when the message, conversation or user is deleted.
  name: Attachments
  x-displayName: Attachments
- description: A stored history of messages sent to and received from a `user`. This
    set of endpoints is used to provision and manage conversations.
  name: Conversations
  x-displayName: Conversations
- description: Endpoints used for managing conversation [participants](https://docs.smooch.io/guide/multi-party-conversations#participant).
  name: Participants
  x-displayName: Participants
- description: Endpoints used for managing [messages](https://docs.smooch.io/guide/key-concepts/#message).
  name: Messages
  x-displayName: Messages
- description: Notify Sunshine Conversations of different conversation activities.
  name: Activities
  x-displayName: Activities
- description: Manage which switchboard integration has control over a conversation.
  name: Switchboard Actions
  x-displayName: Switchboard Actions
- description: |
    This set of endpoints is used to configure and manage various front-end messaging channels.
    <aside class="notice">An SDK integration configured on Admin Center cannot be deleted.</aside>
  name: Integrations
  x-displayName: Integrations
- description: This set of endpoints is used to provision and revoke API keys for
    a Sunshine Conversations integration. An integration can have a maximum of 10
    keys. This endpoint is only available for integrations of type custom. An error
    will be returned when attempting to provision API keys for any other integration
    type.
  name: CustomIntegrationApiKeys
  x-displayName: Custom Integration API Keys
- description: Switchboard operations
  name: Switchboards
  x-displayName: Switchboards
- description: Switchboard Integrations operations <aside class="notice">A switchboard
    is limited to 10 switchboard integrations.</aside>
  name: Switchboard Integrations
  x-displayName: Switchboard Integrations
- description: This set of endpoints is used to manage users.
  name: Users
  x-displayName: Users
- description: Endpoints used for provisioning [clients](https://docs.smooch.io/guide/key-concepts/#client).
  name: Clients
  x-displayName: Clients
- description: All notable changes to the API will be referenced in the [v2 API changelog](https://docs.smooch.io/guide/v2-api-changelog/).
  name: Changelog
- description: |
    Endpoints for managing webhooks associated to a Sunshine Conversations Connect integration or a custom integration. Webhooks are a fantastic way to extend the Sunshine Conversations platform beyond the built-in feature set. You can use webhooks to build your own Sunshine Conversations chat clients, to integrate more deeply with your favorite CRM, or to build a bot.
    A webhook can only operate within the scope of a single Sunshine Conversations app.
    <aside class="notice">An app is limited to 10 webhooks. A webhook can subscribe to multiple trigger events. We recommend using a single webhook entry that includes all the required events.</aside>

    ## Webhook Triggers
    When a webhook trigger is triggered, a POST request will be made to the URL configured in your webhook object along with a JSON payload specific for the event type.

    | Trigger                 | Description                       |
    | ----------------------  | -------------------------- |
    | client:add     | When initiating a channel link or when an SDK client is created.    |
    | client:remove     | When a client is removed. This can happen when:<br/>1. directly using the API<br/>2. removing the client using the SDK<br/>3. transferring a client due to a channel link<br/>4. failing or cancelling a channel link   |
    | client:update     | When a client is updated. This can happen when:<br/>1. a channel finds a user that matches the information provided<br/>2. a client is activated<br/>3. a user unsubscribes from a conversation or blocks the app    |
    | conversation:create     | When a new conversation is created.    |
    | conversation:join     | When a new participant joins a `sdkGroup` conversation.    |
    | conversation:leave     | When a participant leaves a `sdkGroup` conversation.     |
    | conversation:remove  | When a conversation is deleted. |
    | conversation:message  | When a new message was sent in the conversation. |
    | conversation:message:delivery:channel  | When a message is successfully delivered to a channel. |
    | conversation:message:delivery:failure  | When a new message fails to be delivered in the conversation. |
    | conversation:message:delivery:user  | When a new message is successfully delivered to a user. |
    | conversation:postback  | When a user clicks on a postback action button. |
    | conversation:read  | When a user has read the conversation. |
    | conversation:referral | When a user is referred to a conversation. See the <a href="https://docs.smooch.io/guide/conversation-referrals/">conversation referrals</a> guide for more details. |
    | conversation:typing  | When a user starts or stops typing. |
    | switchboard:acceptControl | When a switchboard integration accepts control of a conversation. |
    | switchboard:acceptControl:failure   | When control of a conversation fails to be accepted by a switchboard integration. |
    | switchboard:offerControl  | When a switchboard integration has been offered control of the conversation. |
    | switchboard:offerControl:failure | When control of a conversation can't be offered to another switchboard integration. |
    | switchboard:passControl | When a switchboard integration gives control of the conversation to another switchboard integration. |
    | switchboard:passControl:failure | When changing a switchboard integration to active fails. |
    | user:merge         | When two or more users are merged into one. |
    | user:update         | When a user is updated. (Currently, when a user's identification is updated.)|

    ## Securing Sunshine Conversations Webhooks
    When a webhook is created, a shared secret will be generated for it. The secret can be used to determine the veracity of a request to your webhook route. It is included as an `X-API-Key` header with each webhook request sent to the target URL.
    That secret is available in the response to the POST request used to generate the webhook, or through a GET request to the webhook route.

    ## Retry policy

    A webhook call will be attempted up to 5 times over a 15 minute window. The attempts will happen at an exponentially increasing interval if the target responds with anything but a success (2XX) or a [non-recoverable error](#non-recoverable-errors). If no response is received within 20 seconds, the call will be considered a failure and will also be reattempted.

    ### Non-recoverable Errors
    The following status codes are deemed to be non-recoverable and Sunshine Conversations will not reattempt a call when receiving a response with them:

    - 400: The target exists, but can’t process the payload.
    - 401: The target is behind authentication or doesn’t recognize the webhook secret.
    - 403: Sunshine Conversations should not be calling the target.
    - 404: The target doesn’t exist.
    - 406: The target exists, and rejected the webhook intentionally.
  name: Webhooks
- description: |
    Sunshine Conversations has a rapidly growing partner ecosystem which helps you unlock messaging in your product or service and lets customers find you alongside complementary partners. If you're interested in becoming a partner, tell us what you're building with Sunshine Conversations using our [partner application](https://docs.smooch.io/guide/becoming-an-integration-partner/) and we'll provision you with everything you'll need to build your end of the OAuth flow using Sunshine Conversations Connect. In the meantime the OAuth endpoints detailed below can be tested by impersonating Shoplifter, a partnership we built for testing purposes.

    # Add to Sunshine Conversations Button
    ```html
    <a href="https://app.smooch.io/oauth/authorize?client_id=shoplifter&response_type=code"><img alt="Add to Sunshine Conversations" height="40" width="278" src="https://cdn.smooch.io/images/add_to_sunshine_conversations.png" srcset="https://cdn.smooch.io/images/add_to_sunshine_conversations.png 1x, https://cdn.smooch.io/images/add_to_sunshine_conversations@2x.png 2x"/></a>
    ```
    This HTML template can be used to place an "Add to Sunshine Conversations" button on your website.

    <p class="add-to-sunshine-conversations-button">
        <a href="https://app.smooch.io/oauth/authorize?client_id=shoplifter&response_type=code"><img alt="Add to Sunshine Conversations" height="40" width="278" src="https://cdn.smooch.io/images/add_to_sunshine_conversations.png" srcset="https://cdn.smooch.io/images/add_to_sunshine_conversations.png 1x, https://cdn.smooch.io/images/add_to_sunshine_conversations@2x.png 2x"/></a>
    </p>

    # Sample Application
    An open source sample application implementing Sunshine Conversations Connect has been created to help demonstrate how to get it working. Give [Shoplifter](https://sunco-shoplifter.zendesk.com/) a try.

    The source code is available [here](https://github.com/zendesk/sunshine-conversations-shoplifter).
  name: Sunshine Conversations Connect
  x-displayName: Sunshine Conversations Connect
- description: "The scope of an issued access token is integration scope. This allows\
    \ API calls to be made to a specific Sunshine Conversations app on behalf of an\
    \ integration, identified by the integration’s clientId. The access token grants\
    \ permission to get and create users and conversations associated with the app.\
    \ The token also grants permission to create webhooks, however only webhooks created\
    \ for the integration will be visible. An access token with integration scope\
    \ cannot see or modify webhooks that were created by other integrations, for example.\n\
    \n| API\t      | Access\t|\n| --------  | ------- |\n| [/v2/apps/:appId/users/\\\
    *](#tag/Users)\t| Yes\t|\n| [/v2/apps/:appId/conversations/\\*](#tag/Conversations)\t\
    | Yes\t|\n| [/v2/apps/:appId/integrations/me/webhooks/\\*](#tag/Webhooks)\t| Yes\t\
    |\n| [/v2/apps/:appId/switchboards/\\*](#tag/Switchboards) | No |\n| [/v2/apps/\\\
    *](#tag/Apps) | No |\n"
  name: OAuth Endpoints
  x-displayName: OAuth Endpoints
paths:
  /v2/apps:
    get:
      description: "Lists all apps that a user is part of. This API is paginated through\
        \ [cursor pagination](#section/Introduction/API-pagination-and-records-limits).\
        \ \n```shell\n/v2/apps?page[after]=5e1606762556d93e9c176f69&page[size]=10\n\
        ```\n"
      operationId: listApps
      parameters:
      - description: Contains parameters for applying cursor pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/page'
        style: deepObject
      - $ref: '#/components/parameters/appListFilter'
        description: Contains parameters for filtering the results.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          properties:
            serviceAccountId:
              description: When specified, lists only the apps that the service account
                has access to.
              type: string
          title: appListFilter
          type: object
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appListResponse'
          description: Ok
        "400":
          description: Invalid page query parameters
        "403":
          description: The serviceAccountId provided does not match supplied credentials
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: List Apps
      tags:
      - Apps
      x-accepts: application/json
    post:
      description: Creates a new app. When using [service account](#service-accounts)
        credentials, the service account is automatically granted access to the app.
      operationId: createApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/appCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appResponse'
          description: Created
        "400":
          description: should have required property 'displayName'
        "402":
          description: Your account has reached the maximum number of apps for your
            subscription plan
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: Create App
      tags:
      - Apps
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}:
    delete:
      description: Removes the specified app, including all its enabled integrations.
      operationId: deleteApp
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: App not found
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: Delete App
      tags:
      - Apps
      x-accepts: application/json
    get:
      description: Fetches an individual app.
      operationId: getApp
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appResponse'
          description: Ok
        "404":
          description: App not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Get App
      tags:
      - Apps
      x-accepts: application/json
    patch:
      description: Updates an app.
      operationId: updateApp
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/appUpdateBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appResponse'
          description: Ok
        "400":
          description: App metadata is limited to 4096 bytes in size.
        "404":
          description: App not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Update App
      tags:
      - Apps
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/keys:
    get:
      description: Lists all API keys for a given app.
      operationId: listAppKeys
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appKeyListResponse'
          description: Ok
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: List App Keys
      tags:
      - App Keys
      x-accepts: application/json
    post:
      description: "Creates an API key for the specified app. The response body will\
        \ include a secret \nas well as its corresponding id, which you can use to\
        \ generate JSON Web Tokens to \nsecurely make API calls on behalf of the app.\n"
      operationId: createAppKey
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AppKeyCreateBody'
        content:
          application/json:
            schema:
              example:
                displayName: Key 1
              properties:
                displayName:
                  allOf:
                  - $ref: '#/components/schemas/displayName'
                  description: The name of the API key.
                  example: Key 1
                  nullable: false
              required:
              - displayName
              title: AppKeyCreateBody
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appKeyResponse'
          description: Created
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: Create App Key
      tags:
      - App Keys
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/keys/{keyId}:
    delete:
      description: Removes an API key.
      operationId: deleteAppKey
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the key.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          example: int_5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: App not found
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: Delete App Key
      tags:
      - App Keys
      x-accepts: application/json
    get:
      description: Returns an API key.
      operationId: getAppKey
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the key.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          example: int_5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/appKeyResponse'
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - account
      - bearerAuth:
        - account
      summary: Get App Key
      tags:
      - App Keys
      x-accepts: application/json
  /v2/apps/{appId}/attachments:
    post:
      description: |
        Upload an attachment to Sunshine Conversations to use in future messages. Files are uploaded using the multipart/form-data content type. Use the returned mediaUrl to send a file, image or carousel message.
        <aside class="notice">Note that Sunshine Conversations limits the size and type of file you can upload to the platform. See the <a href="https://docs.smooch.io/guide/validating-files">file validation</a> guide for more details.</aside>
      operationId: uploadAttachment
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The access level for the attachment. Currently the available
          access levels are public and private. If you are a licensed Zendesk customer,
          you must use public. Private is not supported.
        explode: true
        in: query
        name: access
        required: true
        schema:
          default: public
          example: public
          type: string
        style: form
      - description: Specifies the intended container for the attachment, to enable
          automatic attachment deletion (on deletion of associated message, conversation
          or user). For now, only message is supported. See [Attachments for Messages](#section/Attachments-for-Messages)
          for details.
        explode: true
        in: query
        name: for
        required: false
        schema:
          example: message
          type: string
        style: form
      - description: Links the attachment getting uploaded to the conversation ID.
        explode: true
        in: query
        name: conversationId
        required: false
        schema:
          example: c616a583e4c240a871818541
          type: string
        style: form
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/attachmentUploadBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachmentResponse'
          description: Created
        "400":
          description: Bad request
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Upload Attachment
      tags:
      - Attachments
      x-contentType: multipart/form-data
      x-accepts: application/json
  /v2/apps/{appId}/attachments/remove:
    post:
      description: |
        Remove an attachment uploaded to Sunshine Conversations through the Upload attachment API.
        See [Attachments for Messages](#section/Attachments-for-Messages) to have attachments automatically deleted when deleting messages, conversations or users.
        <aside class="notice">Note that deleted attachments can remain available on our CDN’s cache up to 15 minutes after the delete call.</aside>
      operationId: deleteAttachment
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attachmentDeleteBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Attachment not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Delete Attachment
      tags:
      - Attachments
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/attachments/token:
    post:
      description: |
        Generates a media JWT for a list of attachment paths.
      operationId: generateMediaJsonWebToken
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attachmentMediaTokenBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attachmentMediaTokenResponse'
          description: Ok
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Generate Media Token
      tags:
      - Attachments
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/attachments/cookie:
    get:
      description: "With the media JWT retrieved, pass it in the header of the below\
        \ request as it’s authorization in order to set a cookie in the user’s browser\
        \ corresponding to the path within the media JWT.\nThe expiration date of\
        \ this cookie will match the expiration date of the media JWT. \n"
      operationId: setCookie
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
      security:
      - bearerAuth:
        - mediaToken
      summary: Set Cookie
      tags:
      - Attachments
      x-accepts: application/json
  /v2/apps/{appId}/conversations:
    get:
      description: |
        Lists all conversations that a user is part of. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).
        ```shell
        /v2/apps/:appId/conversations?filter[userId]=42589ad070d43be9b00ff7e5
        ```
      operationId: listConversations
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Contains parameters for applying cursor pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/page'
        style: deepObject
      - $ref: '#/components/parameters/conversationListFilter'
        description: Contains parameters for filtering the results.
        explode: true
        in: query
        name: filter
        required: true
        schema:
          properties:
            userId:
              description: The user's id. One of `userId` or `userExternalId` is required,
                but not both.
              type: string
            userExternalId:
              description: The external Id of the user. One of `userId` or `userExternalId`
                is required, but not both.
              type: string
          title: conversationListFilter
          type: object
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversationListResponse'
          description: Ok
        "400":
          description: Invalid page query parameters
        "404":
          description: User not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: List Conversations
      tags:
      - Conversations
      x-accepts: application/json
    post:
      description: Create a conversation for the specified user(s).
      operationId: createConversation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversationCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversationResponse'
          description: Created
        "404":
          description: App not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Create Conversation
      tags:
      - Conversations
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}:
    delete:
      description: Delete an entire conversation record, along with its messages and
        attachments. Note that the default conversation cannot be deleted, but the
        messages contained [can be](#deleteAllMessages).
      operationId: deleteConversation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "400":
          description: Conversation c93bb9c14dde8ffb94564eae cannot be deleted because
            it is the default.
        "404":
          description: Conversation not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Delete Conversation
      tags:
      - Conversations
      x-accepts: application/json
    get:
      description: Fetches an individual conversation.
      operationId: getConversation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversationResponse'
          description: Ok
        "404":
          description: Conversation not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Get Conversation
      tags:
      - Conversations
      x-accepts: application/json
    patch:
      description: Updates a conversation record.
      operationId: updateConversation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversationUpdateBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversationResponse'
          description: Ok
        "404":
          description: Conversation not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Update Conversation
      tags:
      - Conversations
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/join:
    post:
      description: |
        Adds a user to a conversation using either their userId or userExternalId. The endpoint only
        supports adding a participant to a sdkGroup conversation.
      operationId: joinConversation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/participantJoinBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantResponse'
          description: Created
        "400":
          description: Too many participants
        "404":
          description: Conversation not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Join Conversation
      tags:
      - Participants
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/participants:
    get:
      description: |
        Lists all the participants of a particular conversation. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).

        ```shell
        /v2/apps/:appId/conversations/:conversationId/participants?page[before]=26508c10541a4b0ff472e5e2
        ```
      operationId: listParticipants
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: Contains parameters for applying cursor pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/page'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/participantListResponse'
          description: Ok
        "400":
          description: Invalid page query parameters
        "404":
          description: Not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: List Participants
      tags:
      - Participants
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/leave:
    post:
      description: |
        Removes a user from a conversation using either their userId, userExternalId, or participantId.
      operationId: leaveConversation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/participantLeaveBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: User is not a member of the conversation
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Leave Conversation
      tags:
      - Participants
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/messages:
    delete:
      description: Delete all messages of a particular conversation.
      operationId: deleteAllMessages
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Delete All Messages
      tags:
      - Messages
      x-accepts: application/json
    get:
      description: |
        List all messages for a particular conversation. This API is paginated through
        [cursor pagination](#section/Introduction/API-pagination-and-records-limits), in the _backwards_ direction, with the
        most recent (i.e. last) page of messages being returned by default. The `hasMore` flag indicates whether more messages
        exist in the direction you are currently paginating through. To page backwards in the history, use the `beforeCursor` or follow the `prev`
        link. The page size limit is fixed at 100 messages per page.

        ```shell
        /v2/apps/:appId/conversations/:conversationId/messages?page[before]=5f32b88acf6bf25073b2be56
        ```
      operationId: listMessages
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: Contains parameters for applying cursor pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/page'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageListResponse'
          description: Ok
        "404":
          description: Message not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: List Messages
      tags:
      - Messages
      x-accepts: application/json
    post:
      description: Send a message in a particular conversation.
      operationId: postMessage
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              text:
                $ref: '#/components/examples/text'
              carousel:
                $ref: '#/components/examples/carousel'
              file:
                $ref: '#/components/examples/file'
              form:
                $ref: '#/components/examples/form'
              image:
                $ref: '#/components/examples/image'
              list:
                $ref: '#/components/examples/list'
              location:
                $ref: '#/components/examples/location'
              whatsapp template:
                $ref: '#/components/examples/whatsappTemplate'
            schema:
              $ref: '#/components/schemas/messagePost'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                text:
                  $ref: '#/components/examples/text-2'
                carousel:
                  $ref: '#/components/examples/carousel-2'
                file:
                  $ref: '#/components/examples/file-2'
                form:
                  $ref: '#/components/examples/form-2'
                image:
                  $ref: '#/components/examples/image-2'
                list:
                  $ref: '#/components/examples/list-2'
                location:
                  $ref: '#/components/examples/location-2'
              schema:
                $ref: '#/components/schemas/messagePostResponse'
          description: Created
        "423":
          description: |
            Message limit reached
            <aside class="notice">To learn more about the conversation message limit, consult the section in the introduction linked <a href="#section/Introduction/Conversation-Size-Limits">here</a>.</aside>
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Post Message
      tags:
      - Messages
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/messages/{messageId}:
    delete:
      description: Delete a single message of a particular conversation.
      operationId: deleteMessage
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: The id of the message.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Delete Message
      tags:
      - Messages
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/activity:
    post:
      description: |
        Notify Sunshine Conversations of different conversation activities. Supported activity types are:
        * Typing activity
        * Conversation read event
      operationId: postActivity
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              request:
                value:
                  author:
                    type: user
                    userId: 5963c0d619a30a2e00de36b8
                  type: conversation:read
            schema:
              $ref: '#/components/schemas/activityPost'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Post Activity
      tags:
      - Activities
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/acceptControl:
    post:
      description: The acceptControl action transfers the control of the conversation
        to the pending switchboard integration. When using integration auth scope,
        a 403 is returned if the pending switchboard integration is not the authenticated
        integration.
      operationId: acceptControl
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/acceptControlBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Accept Control
      tags:
      - Switchboard Actions
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/offerControl:
    post:
      description: The offerControl action will invite a switchboard integration to
        accept control of the conversation (changing its status to pending), and trigger
        a webhook signal to that integration indicating that they have been offered
        control of the conversation. Invalidates previous offerControl actions.
      operationId: offerControl
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offerControlBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Offer Control
      tags:
      - Switchboard Actions
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/passControl:
    post:
      description: The passControl action marks the named switchboard integration
        as active and transitions all the other switchboard integrations to standby
        status. The `passControl` action is idempotent if either the target `switchboardIntegration`
        is specified explicitly by its `id` or `name`, or the `next` keyword is used
        for the `switchboardIntegration` field, and the invoking integration can be
        identified by its [OAuth token](https://docs.smooch.io/guide/oauth/#redirect-and-acquiring-an-oauth-token)
        or [Custom Integration API Key](https://docs.smooch.io/rest/#tag/CustomIntegrationApiKeys)
        credentials. Duplicate passControl actions using the `next` keyword and their
        metadata are disregarded. For more information, see [Switchboard passControl](https://docs.smooch.io/guide/switchboard/#pass-control).
      operationId: passControl
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/passControlBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Pass Control
      tags:
      - Switchboard Actions
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/conversations/{conversationId}/releaseControl:
    post:
      description: The releaseControl action releases the control of the conversation
        by nullifying its switchboard state. When using integration auth scope, a
        403 is returned if the active switchboard integration is not the authenticated
        integration.
      operationId: releaseControl
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the conversation.
        explode: false
        in: path
        name: conversationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
        - account
      - bearerAuth:
        - integration
        - app
        - account
      summary: Release Control
      tags:
      - Switchboard Actions
      x-accepts: application/json
  /v2/apps/{appId}/integrations:
    get:
      description: |
        List available integrations. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).
        ```shell
        /v2/apps/:appId/integrations?page[after]=5e1606762556d93e9c176f69&page[size]=10&filter[types]=custom,web
        ```
      operationId: listIntegrations
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Contains parameters for applying cursor pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/page'
        style: deepObject
      - $ref: '#/components/parameters/integrationListFilter'
        description: Contains parameters for filtering the results.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          properties:
            types:
              description: Comma-separated list of types to return. If omitted, all
                types are returned.
              example: android,ios
              type: string
          title: integrationListFilter
          type: object
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/integrationListResponse'
              schema:
                $ref: '#/components/schemas/integrationListResponse'
          description: Ok
        "400":
          description: Invalid query parameters
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: List Integrations
      tags:
      - Integrations
      x-accepts: application/json
    post:
      description: The Create Integration endpoint allows you to provision apps with
        front-end messaging channels. Selecting a `custom` integration allows the
        creation of webhooks.
      operationId: createIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/integration'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/integrationResponse'
              schema:
                allOf:
                - $ref: '#/components/schemas/integrationResponse'
                description: The created integration.
          description: Created
        "400":
          description: Invalid integration type
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Create Integration
      tags:
      - Integrations
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/integrations/{integrationId}:
    delete:
      description: Delete the specified integration.
      operationId: deleteIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "400":
          description: SDK integrations configured on Admin Center cannot be deleted
        "404":
          description: Integration not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Delete Integration
      tags:
      - Integrations
      x-accepts: application/json
    get:
      description: Get integration.
      operationId: getIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/integrationResponse'
              schema:
                allOf:
                - $ref: '#/components/schemas/integrationResponse'
                description: The fetched integration.
          description: Ok
        "404":
          description: Integration not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Get Integration
      tags:
      - Integrations
      x-accepts: application/json
    patch:
      description: Allows you to update certain fields of existing integrations. If
        updating a specific property is not supported, you must delete the integration
        and re-create it with the new data.
      operationId: updateIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/integrationUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/integrationResponse'
              schema:
                allOf:
                - $ref: '#/components/schemas/integrationResponse'
                description: The updated integration.
          description: Ok
        "404":
          description: Integration not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Update Integration
      tags:
      - Integrations
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/integrations/{integrationId}/keys:
    get:
      description: Lists all API keys for a given integration.
      operationId: listCustomIntegrationKeys
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationApiKeyListResponse'
          description: Ok
        "400":
          description: API keys are available only for custom integrations
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: List Integration Keys
      tags:
      - CustomIntegrationApiKeys
      x-accepts: application/json
    post:
      description: Creates an API key for the specified custom integration. The response
        body will include a secret as well it’s corresponding id, which you can use
        to generate JSON Web Tokens to securely make API calls on behalf of the integration.
      operationId: createCustomIntegrationKey
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/IntegrationApiKey'
        content:
          application/json:
            schema:
              example:
                displayName: My custom key
              properties:
                displayName:
                  description: The name of the API key.
                  example: My custom key
                  type: string
              required:
              - displayName
              title: IntegrationApiKey
              type: object
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrationApiKeyResponse'
          description: Created
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Create Integration Key
      tags:
      - CustomIntegrationApiKeys
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/integrations/{integrationId}/keys/{keyId}:
    delete:
      description: Removes an API key.
      operationId: deleteCustomIntegrationKey
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: The id of the key.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          example: int_5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Delete Integration Key
      tags:
      - CustomIntegrationApiKeys
      x-accepts: application/json
    get:
      description: Get the specified API key.
      operationId: getCustomIntegrationKey
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: The id of the key.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          example: int_5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/integrationApiKeyResponse'
          description: Ok
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Get Integration Key
      tags:
      - CustomIntegrationApiKeys
      x-accepts: application/json
  /v2/apps/{appId}/integrations/{integrationId}/webhooks:
    get:
      description: Lists all webhooks for a given Sunshine Conversations Connect integration
        or custom integration.
      operationId: listWebhooks
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhookListResponse'
          description: Ok
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
      - bearerAuth:
        - integration
        - app
      summary: List Webhooks
      tags:
      - Webhooks
      x-accepts: application/json
    post:
      description: Creates a new webhook associated with a Sunshine Conversations
        Connect integration or a custom integration.
      operationId: createWebhook
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhookResponse'
          description: Created
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
      - bearerAuth:
        - integration
        - app
      summary: Create Webhook
      tags:
      - Webhooks
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}:
    delete:
      description: Deletes the specified webhook associated with a Sunshine Conversations
        Connect integration or a custom integration.
      operationId: deleteWebhook
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: The id of the webhook.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
      - bearerAuth:
        - integration
        - app
      summary: Delete Webhook
      tags:
      - Webhooks
      x-accepts: application/json
    get:
      description: Gets the specified webhook associated with a Sunshine Conversations
        Connect integration or a custom integration.
      operationId: getWebhook
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: The id of the webhook.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhookResponse'
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
      - bearerAuth:
        - integration
        - app
      summary: Get Webhook
      tags:
      - Webhooks
      x-accepts: application/json
    patch:
      description: Updates the specified webhook associated with a Sunshine Conversations
        Connect integration or a custom integration.
      operationId: updateWebhook
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The id of the integration.
        explode: false
        in: path
        name: integrationId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      - description: The id of the webhook.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          example: 029c31f25a21b47effd7be90
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhookBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhookResponse'
          description: Ok
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - basicAuth:
        - integration
        - app
      - bearerAuth:
        - integration
        - app
      summary: Update Webhook
      tags:
      - Webhooks
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/switchboards:
    get:
      description: |
        Lists all switchboards belonging to the app.
      operationId: listSwitchboards
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/switchboardListResponse'
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: List Switchboards
      tags:
      - Switchboards
      x-accepts: application/json
    post:
      description: Create a switchboard.
      operationId: createSwitchboard
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              examples:
                response:
                  value:
                    switchboard:
                      id: 5ef21b132f21af34f088530d
                      enabled: false
              schema:
                $ref: '#/components/schemas/switchboardResponse'
          description: Created
        "400":
          description: Only one switchboard can be created per app
        "404":
          description: Not Found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Create Switchboard
      tags:
      - Switchboards
      x-accepts: application/json
  /v2/apps/{appId}/switchboards/{switchboardId}:
    delete:
      description: Deletes the switchboard and all its switchboard integrations. The
        integrations linked to these switchboard integrations are not deleted and
        will start receiving all conversation events.
      operationId: deleteSwitchboard
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard.
        explode: false
        in: path
        name: switchboardId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Delete Switchboard
      tags:
      - Switchboards
      x-accepts: application/json
    patch:
      description: Updates a switchboard record.
      operationId: updateSwitchboard
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard.
        explode: false
        in: path
        name: switchboardId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/switchboardUpdateBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/switchboardResponse'
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Update Switchboard
      tags:
      - Switchboards
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations:
    get:
      description: |
        Lists all switchboard integrations linked to the switchboard.
      operationId: listSwitchboardIntegrations
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard.
        explode: false
        in: path
        name: switchboardId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/switchboardIntegrationListResponse'
          description: Ok
        "404":
          description: Switchboard not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: List Switchboard Integrations
      tags:
      - Switchboard Integrations
      x-accepts: application/json
    post:
      description: Create a switchboard integration.
      operationId: createSwitchboardIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard.
        explode: false
        in: path
        name: switchboardId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              request:
                value:
                  name: bot
                  integrationType: zd:agentWorkspace
                  deliverStandbyEvents: true
                  nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606
                  messageHistoryCount: 5
            schema:
              $ref: '#/components/schemas/switchboardIntegrationCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/switchboardIntegrationResponse'
          description: Created
        "400":
          description: Switchboard has reached the max number of switchboard integrations
            (10)
        "404":
          description: Switchboard not found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Create Switchboard Integration
      tags:
      - Switchboard Integrations
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations/{switchboardIntegrationId}:
    delete:
      description: Deletes the switchboard integration. If the deleted switchboard
        integration had an active status for some conversations, the default switchboard
        integration will replace it. Note that it is forbidden to delete a switchboard
        integration if it's the default one (a new one must be chosen first) or if
        another switchboard integration's `nextSwitchboardIntegrationId` refers to
        it. The integration that was linked to the deleted switchboard integration
        will start receiving all conversation events, regardless of the switchboard
        status.
      operationId: deleteSwitchboardIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard.
        explode: false
        in: path
        name: switchboardId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard integration.
        explode: false
        in: path
        name: switchboardIntegrationId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: Not Found
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Delete Switchboard Integration
      tags:
      - Switchboard Integrations
      x-accepts: application/json
    patch:
      description: Updates a switchboard integration record.
      operationId: updateSwitchboardIntegration
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard.
        explode: false
        in: path
        name: switchboardId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: Identifies the switchboard integration.
        explode: false
        in: path
        name: switchboardIntegrationId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              request:
                value:
                  name: bot
                  integrationType: zd:agentWorkspace
                  deliverStandbyEvents: true
                  nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606
                  messageHistoryCount: 5
            schema:
              $ref: '#/components/schemas/switchboardIntegrationUpdateBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/switchboardIntegrationResponse'
          description: Ok
        "404":
          description: Enabled switchboard must have an associated default switchboardIntegration
      security:
      - basicAuth:
        - app
        - account
      - bearerAuth:
        - app
        - account
      summary: Update Switchboard Integration
      tags:
      - Switchboard Integrations
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/users:
    post:
      description: Creates a new user.
      operationId: createUser
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreateBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
          description: Created
        "409":
          description: User already exists
      security:
      - basicAuth:
        - account
        - app
        - integration
      - bearerAuth:
        - account
        - app
        - integration
      summary: Create User
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/users/{userIdOrExternalId}:
    delete:
      description: Delete a user, its clients and its conversation history. The user
        is considered completely deleted once the `user:delete` webhook is fired.
        To only delete a user’s personal information, see [Delete User Personal Information](#operation/deleteUserPersonalInformation).
      operationId: deleteUser
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "404":
          description: User not found
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Delete User
      tags:
      - Users
      x-accepts: application/json
    get:
      description: Fetches an individual user.
      operationId: getUser
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
          description: Ok
        "404":
          description: User not found
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Get User
      tags:
      - Users
      x-accepts: application/json
    patch:
      description: Updates a user.
      operationId: updateUser
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdateBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponse'
          description: Ok
        "404":
          description: User not found
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Update User
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/users/{userIdOrExternalId}/clients:
    get:
      description: |
        Get all the clients for a particular user, including both linked clients and pending clients.
        This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).

        ```shell
        /v2/apps/:appId/users/:userId/clients?page[after]=5ebee0975ac5304b664a12fa
        ```
      operationId: listClients
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      - description: Contains parameters for applying cursor pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/page'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientListResponse'
          description: Ok
        "400":
          description: Invalid page query parameters
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: List Clients
      tags:
      - Clients
      x-accepts: application/json
    post:
      description: Create a client and link it to a channel specified by the `matchCriteria.type`.
        Note that the client is initially created with a `pending` status. The status
        of the linking request can be tracked by listening to the `link:match`, `link:success`
        and `link:failure` webhooks (only available in v1). For more information,
        see [link-events](https://docs.smooch.io/rest/v1/#link-events).
      operationId: createClient
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              mailgun:
                value:
                  matchCriteria:
                    type: mailgun
                    integrationId: 582dedf230e788746891281a
                    primary: true
                    address: steveb@channel5.com
                    subject: New message from {appName}
                  confirmation:
                    type: immediate
                    message:
                      author:
                        type: business
                        displayName: Steve
                        avatarUrl: https://www.gravatar.com/image.jpg
                      content:
                        type: text
                        text: Hello!
                      metadata:
                        lang: en-ca
                  target:
                    conversationId: 029c31f25a21b47effd7be90
              messsagebird:
                value:
                  matchCriteria:
                    type: messsagebird
                    integrationId: 582dedf230e788746891281a
                    primary: true
                    phoneNumber: +1 212-555-2368
                  confirmation:
                    type: immediate
                    message:
                      author:
                        type: business
                        displayName: Steve
                        avatarUrl: https://www.gravatar.com/image.jpg
                      content:
                        type: text
                        text: Hello!
                      metadata:
                        lang: en-ca
                  target:
                    conversationId: 029c31f25a21b47effd7be90
              twilio:
                value:
                  matchCriteria:
                    type: twilio
                    integrationId: 582dedf230e788746891281a
                    primary: true
                    phoneNumber: +1 212-555-2368
                  confirmation:
                    type: immediate
                    message:
                      author:
                        type: business
                        displayName: Steve
                        avatarUrl: https://www.gravatar.com/image.jpg
                      content:
                        type: text
                        text: Hello!
                      metadata:
                        lang: en-ca
                  target:
                    conversationId: 029c31f25a21b47effd7be90
              whatsapp:
                value:
                  matchCriteria:
                    type: whatsapp
                    integrationId: 582dedf230e788746891281a
                    primary: true
                    phoneNumber: +1 212-555-2368
                  confirmation:
                    type: immediate
                    message:
                      author:
                        type: business
                        displayName: Steve
                        avatarUrl: https://www.gravatar.com/image.jpg
                      content:
                        type: text
                        text: Hello!
                      metadata:
                        lang: en-ca
                  target:
                    conversationId: 029c31f25a21b47effd7be90
            schema:
              $ref: '#/components/schemas/clientCreate'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
          description: Created
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Create Client
      tags:
      - Clients
      x-contentType: application/json
      x-accepts: application/json
  /v2/apps/{appId}/users/{userIdOrExternalId}/clients/{clientId}:
    delete:
      description: Remove a particular client and unsubscribe it from all connected
        conversations.
      operationId: removeClient
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      - description: The client's id.
        explode: false
        in: path
        name: clientId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
        "400":
          description: Cannot remove a client of type 'sdk'
        "404":
          description: Client not found
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Remove Client
      tags:
      - Clients
      x-accepts: application/json
  /v2/apps/{appId}/users/{userIdOrExternalId}/devices:
    get:
      description: |
        Get all the devices for a particular user.
        The Devices are sorted based on last seen time.

        ```shell
        /v2/apps/:appId/users/:userId/devices
        ```
      operationId: listDevices
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientListResponse'
          description: Ok
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: List Devices
      tags:
      - Devices
      x-accepts: application/json
  /v2/apps/{appId}/users/{userIdOrExternalId}/devices/{deviceId}:
    get:
      description: |
        Fetches a specific Device.

        ```shell
        /v2/apps/:appId/users/:userId
        ```
      operationId: getDevice
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      - description: The device's id.
        explode: false
        in: path
        name: deviceId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceResponse'
          description: Ok
        "404":
          description: Device not found
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Get Device
      tags:
      - Devices
      x-accepts: application/json
  /v2/apps/{appId}/users/{userIdOrExternalId}/personalinformation:
    delete:
      description: Delete a user’s personal information. Calling this API will clear
        `givenName`, `surname`, `email` and `avatarUrl` and every custom property
        for the specified user. For every client owned by the user, it will also clear
        `displayName`, `avatarUrl` and any channel specific information stored in
        the info and raw fields. Calling this API doesn’t delete the user’s conversation
        history. To fully delete the user, see [Delete User](#operation/deleteUser).
      operationId: deleteUserPersonalInformation
      parameters:
      - description: Identifies the app.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          example: 5d8cff3cd55b040010928b5b
          type: string
        style: simple
      - description: The user's id or externalId.
        explode: false
        in: path
        name: userIdOrExternalId
        required: true
        schema:
          example: 42589ad070d43be9b00ff7e5
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/userDeletePersonalInformationResponse'
              schema:
                $ref: '#/components/schemas/userResponse'
          description: Ok
        "404":
          description: User not found
      security:
      - basicAuth:
        - app
        - account
        - integration
      - bearerAuth:
        - app
        - account
        - integration
      summary: Delete User Personal Information
      tags:
      - Users
      x-accepts: application/json
  /oauth/authorize:
    get:
      description: This endpoint begins the OAuth flow. It relies on a browser session
        for authentication. If the user is not logged in to Sunshine Conversations
        they will be redirected to the login page. If the user has many apps, they
        will first be prompted to select the one they wish to integrate with. They
        will then be presented with an Allow/Deny dialog, describing details of the
        access your integration is requesting.
      operationId: authorize
      parameters:
      - description: Your integration’s unique identifier
        explode: true
        in: query
        name: client_id
        required: true
        schema:
          example: 5e4af71a81966cfff3ef6550
          type: string
        style: form
      - description: For now the only acceptable value is code.
        explode: true
        in: query
        name: response_type
        required: true
        schema:
          example: code
          type: string
        style: form
      - description: You may pass in any arbitrary string value here which will be
          returned to you along with the code via browser redirect.
        explode: true
        in: query
        name: state
        required: false
        schema:
          example: Pending
          type: string
        style: form
      - description: You may pass in a redirect_uri to determine which URI the response
          is redirected to. This URI must be contained in the list configured by your
          integration. If this option is not passed, the first URI present in the
          list will be used.
        explode: true
        in: query
        name: redirect_uri
        required: false
        schema:
          example: https://example.org
          type: string
        style: form
      responses:
        "302":
          description: Found. Redirecting to /login
        "404":
          description: The provided redirect_uri does not match the client_id configuration
      security: []
      summary: Authorize
      tags:
      - OAuth Endpoints
      x-accepts: application/json
  /oauth/token:
    post:
      description: This endpoint is used to exchange an authorization code for an
        access token. It should only be used in server-to-server calls.
      operationId: getToken
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                code:
                  description: The authorization code received via /oauth/authorize
                  example: "658965"
                  type: string
                grant_type:
                  description: Must be set to the string `authorization_code`
                  example: authorization_code
                  type: string
                client_id:
                  description: Your integration’s unique identifier
                  example: 5e4af71a81966cfff3ef6550
                  type: string
                client_secret:
                  description: Your integration’s secret
                  example: 5XJ85yjUtRcaQu_pDINblPZb
                  type: string
              required:
              - client_id
              - client_secret
              - code
              - grant_type
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    description: An access token that can now be used to call Sunshine
                      Conversations APIs.
                    type: string
                  token_type:
                    description: Bearer. All issued tokens are of this type.
                    type: string
          description: Ok
        "401":
          description: Authorization is required
      security: []
      summary: Get Token
      tags:
      - OAuth Endpoints
      x-contentType: application/json
      x-accepts: application/json
  /oauth/authorization:
    delete:
      description: "This endpoint is used to revoke your integration’s access to the\
        \ user’s Sunshine Conversations app. Revoking access means your integration\
        \ will no longer be able to interact with the app, and any webhooks the integration\
        \ had previously configured will be removed. \nCalling this endpoint is equivalent\
        \ to the user removing your integration manually in the Sunshine Conversations\
        \ web app. Your integration’s `removeUrl` (if configured) will also be called\
        \ when an integration is removed in this way.\n"
      operationId: revokeAccess
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Ok
      security:
      - basicAuth:
        - integration
      - bearerAuth:
        - integration
      summary: Revoke Access
      tags:
      - OAuth Endpoints
      x-accepts: application/json
components:
  examples:
    text:
      value:
        author:
          type: business
        content:
          type: text
          text: Hello!
    carousel:
      value:
        author:
          type: business
        content:
          type: carousel
          items:
          - title: Tacos
            description: Get your tacos today!
            mediaUrl: https://example.org/image.jpg
            altText: A giant taco
            size: compact
            actions:
            - text: Select
              type: postback
              payload: TACOS
            - text: More info
              type: link
              uri: https://example.org
          - title: Ramen
            description: Get your ramen today!
            mediaUrl: https://example.org/image.jpg
            altText: A chicken vegetable ramen bowl
            size: compact
            actions:
            - text: Select
              type: postback
              payload: RAMEN
            - text: More info
              type: link
              uri: https://example.org
    file:
      value:
        author:
          type: business
        content:
          type: file
          text: Here's our FAQ!
          mediaUrl: https://example.org/FAQ.pdf
          altText: FAQ.pdf
    form:
      value:
        author:
          type: business
        content:
          type: form
          blockChatInput: true
          fields:
          - type: text
            name: full_name
            label: Your name?
            placeholder: Type your name...
            minSize: 1
            maxSize: 30
          - type: email
            name: email_address
            label: Your email?
            placeholder: email@example.com
        destination:
          integrationType: web
    image:
      value:
        author:
          type: business
        content:
          type: image
          text: Hello!
          mediaUrl: https://example.org/image.jpg
          altText: A wonderful image
    list:
      value:
        author:
          type: business
        content:
          type: list
          items:
          - title: Tacos
            description: Get your tacos today!
            mediaUrl: https://example.org/image.jpg
            size: compact
            actions:
            - text: Select
              type: postback
              payload: TACOS
            - text: More info
              type: link
              uri: https://example.org
          - title: Ramen
            description: Get your ramen today!
            mediaUrl: https://example.org/image.jpg
            size: compact
            actions:
            - text: Select
              type: postback
              payload: RAMEN
            - text: More info
              type: link
              uri: https://example.org
    location:
      value:
        author:
          type: business
        content:
          type: location
          coordinates:
            lat: 45.5261583
            long: -73.595346
          location:
            address: 5333 avenue Casgrain
            name: Zendesk Montréal
    whatsappTemplate:
      value:
        author:
          type: business
        schema: whatsapp
        content:
          type: template
          template:
            namespace: XXXXXXXX_XXXX_XXXX_XXXX_XXXXXXXXXXXX
            name: hello_world
            language:
              policy: deterministic
              code: en_US
            component:
            - type: header
              parameters:
              - type: image
                image:
                  link: https://image.jpg
            - type: body
              parameters:
              - type: text
                text: My User Name
              - type: text
                text: My Agent Name
        destination:
          integrationType: whatsapp
    text-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: text
            text: Hello!
          source:
            type: api:conversations
    carousel-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: carousel
            text: |-
              1. Tacos
              Get your tacos today!
              More info: https://example.org

              2. Ramen
              Get your ramen today!
              More info: https://example.org
            items:
            - title: Tacos
              description: Get your tacos today!
              mediaUrl: https://example.org/image.jpg
              altText: A giant taco
              mediaType: text/html; charset=UTF-8
              size: compact
              actions:
              - text: Select
                type: postback
                payload: TACOS
                uri: ""
              - text: More info
                type: link
                uri: https://example.org
            - title: Ramen
              description: Get your ramen today!
              mediaUrl: https://example.org/image.jpg
              altText: A chicken vegetable ramen bowl
              mediaType: text/html; charset=UTF-8
              size: compact
              actions:
              - text: Select
                type: postback
                payload: RAMEN
                uri: ""
              - text: More info
                type: link
                uri: https://example.org
          source:
            type: api:conversations
    file-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: file
            text: Here's our FAQ!
            mediaUrl: https://example.org/FAQ.pdf
            altText: FAQ.pdf
            mediaType: application/pdf
            mediaSize: 627328
          source:
            type: api:conversations
    form-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: form
            submitted: false
            blockChatInput: true
            fields:
            - type: text
              name: full_name
              label: Your name?
              placeholder: Type your name...
              minSize: 1
              maxSize: 30
            - type: email
              name: email_address
              label: Your email?
              placeholder: email@example.com
          source:
            type: api:conversations
    image-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: image
            text: Hello!
            mediaUrl: https://example.org/image.jpg
            altText: A wonderful image
            mediaType: image/jpg
            mediaSize: 627328
          source:
            type: api:conversations
    list-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: list
            text": |-
              1. Tacos
              Get your tacos today!
              More info: https://example.org

              2. Ramen
              Get your ramen today!
              More info: https://example.org
            items:
            - title: Tacos
              description: Get your tacos today!
              mediaUrl: https://example.org/image.jpg
              mediaType: text/html; charset=UTF-8
              size: compact
              actions:
              - text: Select
                type: postback
                payload: TACOS
                uri: ""
              - text: More info
                type: link
                uri: https://example.org
            - title: Ramen
              description: Get your ramen today!
              mediaUrl: https://example.org/image.jpg
              mediaType: text/html; charset=UTF-8
              size: compact
              actions:
              - text: Select
                type: postback
                payload: RAMEN
                uri: ""
              - text: More info
                type: link
                uri: https://example.org
          source:
            type: api:conversations
    location-2:
      value:
        messages:
        - id: 5f748c1a2b5315fc007e7977
          received: 2020-09-30T13:46:02.733Z
          author:
            type: business
            avatarUrl: https://www.gravatar.com/image.jpg
          content:
            type: location
            text: |-
              Location shared:
              https://maps.google.com/maps?q=45.5261583,-73.595346
            coordinates:
              lat: 45.5261583
              long: -73.595346
            location:
              address: 5333 avenue Casgrain
              name: Zendesk Montréal
          source:
            type: api:conversations
    integrationListResponse:
      value:
        integrations:
        - id: 5e4af71a81966cfff3ef6550
          type: android
          status: active
          displayName: Android
          serverId: <sender-id>
          canUserCreateMoreConversations: true
          defaultResponderId: 5e4af71a81966cfff3ef6551
        meta:
          hasMore: true
          afterCursor: 5e4af71a81966cfff3ef6550
          beforeCursor: 5e4af71a81966cfff3ef6550
        links:
          prev: https://api.smooch.io/v2/apps/5e4af71a81966cfff3ef6551/integrations?page[before]=5e4af71a81966cfff3ef6550
          after: https://api.smooch.io/v2/apps/5e4af71a81966cfff3ef6551/integrations?page[after]=5e4af71a81966cfff3ef6550
    integrationResponse:
      value:
        integration:
          id: 5e4af71a81966cfff3ef6550
          type: android
          status: active
          displayName: Android
          serverId: <sender-id>
          canUserCreateMoreConversations: true
          defaultResponderId: 5e4af71a81966cfff3ef6551
    userDeletePersonalInformationResponse:
      value:
        user:
          id: 6e416caac6a5e9544e3fb6d7
          externalId: your-own-id
          profile: {}
          signedUpAt: 2020-05-21T15:53:30.197Z
          metadata: {}
    clientAddEvent:
      value:
        app:
          id: 60bf823452c2a718162f986a
        webhook:
          id: 612905a67821c3f206d6909f
          version: v2
        events:
        - id: 61290a62c64b3af1ff868714
          createdAt: 2021-08-27T15:53:06.744Z
          type: client:add
          payload:
            conversation:
              id: c2c8710dedf8f26ee6e9a68f
              type: personal
            user:
              id: 6a2343df57be6fe0f98efc33
            client:
              integrationId: 60bfc8fa67951336472cc57a
              type: twilio
              id: 61290a4f7821c3f206d690a3
              status: pending
            reason: channelLinking
            source:
              type: web
              integrationId: 60bf824952c2a718162f989c
    clientRemoveEvent:
      value:
        app:
          id: 60bf823452c2a718162f986a
        webhook:
          id: 612905a67821c3f206d6909f
          version: v2
        events:
        - id: 61290a6cc64b3af1ff868715
          createdAt: 2021-08-27T15:53:16.591Z
          type: client:remove
          payload:
            user:
              id: 6a2343df57be6fe0f98efc33
            client:
              integrationId: 60bfc8fa67951336472cc57a
              type: twilio
              externalId: +15140000000
              id: 61290a4f7821c3f206d690a3
              displayName: +1 514-000-0000
              status: active
              info:
                phoneNumber: +15140000000
                city: MONTREAL
                country: CA
                state: QC
              raw:
                FromZip: ""
                FromState: QC
                FromCity: MONTREAL
                FromCountry: CA
                From: +15140000000
              lastSeen: 2021-08-27T15:53:06.721Z
              linkedAt: 2021-08-27T15:52:47.998Z
            reason: sdk
            source:
              type: web
              integrationId: 60bf824952c2a718162f989c
    clientUpdateEvent:
      value:
        app:
          id: 60bf823452c2a718162f986a
        webhook:
          id: 612905a67821c3f206d6909f
          version: v2
        events:
        - id: 61290a62c64b3af1ff868714
          createdAt: 2021-08-27T15:53:06.744Z
          type: client:update
          payload:
            conversation:
              id: c2c8710dedf8f26ee6e9a68f
              type: personal
            user:
              id: 6a2343df57be6fe0f98efc33
            client:
              integrationId: 60bfc8fa67951336472cc57a
              type: twilio
              externalId: +15140000000
              id: 61290a4f7821c3f206d690a3
              displayName: +1 514-000-0000
              status: active
              info:
                phoneNumber: +15140000000
                city: MONTREAL
                country: CA
                state: QC
              raw:
                FromZip: ""
                FromState: QC
                FromCity: MONTREAL
                FromCountry: CA
                From: +15140000000
              lastSeen: 2021-08-27T15:53:06.721Z
              linkedAt: 2021-08-27T15:52:47.998Z
            reason: confirmed
    conversationCreateEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:create
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              metadata:
                lang: en-ca
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
            creationReason: prechatCapture
            source:
              type: web
              integrationId: 5ecff63ffc3ab25f4561c8a0
    conversationJoinEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:join
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: sdkGroup
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
    conversationLeaveEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:leave
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: sdkGroup
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
    conversationRemoveEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:remove
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: sdkGroup
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
    conversationMessageDeliveryChannelEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:message:delivery:channel
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
            destination:
              type: telegram
              integrationId: 5ec69c6e12dda33be985cb1a
            externalMessages:
            - id: "371"
            message:
              id: 5f74a31c2b5315fc007e7997
            isFinalEvent: true
    conversationMessageDeliveryFailureEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:message:delivery:failure
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
            destination:
              type: twilio
              integrationId: 5ecc061987d4d413774a8131
            message:
              id: 5f74be6256be263abf0ffd5f
            isFinalEvent: true
            error:
              code: uncategorized_error
              message: Unsupported message type `form`
    conversationMessageDeliveryUserEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:message:delivery:user
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
            destination:
              type: twilio
              integrationId: 5ecc061987d4d413774a8131
            externalMessages:
            - id: SM900c83b124b6467eb6db835a969d7374
            message:
              id: 5f74b82c56be263abf0ffd50
            isFinalEvent: true
    conversationMessageEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:message
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            message:
              id: 5f74c7d84a146f3abd72af1d
              received: 2020-09-30T18:00:56.820Z
              author:
                userId: 26508c10541a4b0ff472e5e2
                avatarUrl: https://s3.amazonaws.com/avatar.jpg
                displayName: Steve Rogers
                type: user
                user:
                  id: 26508c10541a4b0ff472e5e2
                  externalId: "912382197"
              content:
                type: text
                text: hello
              source:
                integrationId: 5ec69c6e12dda33be985cb1a
                originalMessageId: "374"
                originalMessageTimestamp: 2020-09-30T18:00:56.000Z
                type: telegram
    conversationPostbackEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:postback
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            postback:
              payload: Greet
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: "912382197"
            source:
              type: telegram
              integrationId: 5ec69c6e12dda33be985cb1a
    conversationReadEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:read
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            activity:
              type: conversation:read
              author:
                type: user
                userId: b5a0f8de1fd4198a96faa0af
                user:
                  id: b5a0f8de1fd4198a96faa0af
              source:
                type: web
                integrationId: 5ecff63ffc3ab25f4561c8a0
    conversationReferralEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          type: conversation:referral
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: 912382197
            source:
              type: web
              integrationId: 5ecff63ffc3ab25f4561c8a0
            referral: {}
    conversationTypingEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: conversation:typing
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            activity:
              type: typing:start
              author:
                type: user
                userId: 7283cdd6f586679a5fc43cfb
                user:
                  id: 7283cdd6f586679a5fc43cfb
              source:
                type: web
                integrationId: 5ecff63ffc3ab25f4561c8a0
    switchboardAcceptControlEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: switchboard:acceptControl
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
    switchboardAcceptControlFailureEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: switchboard:acceptControl:failure
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            error:
              code: switchboard_invalid_action
              message: There is no pendingSwitchboardIntegration
    switchboardOfferControlEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: switchboard:offerControl
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
              pendingSwitchboardIntegration:
                id: 5eece1cacdbffb08f5c3ed43
                name: human
                integrationId: 5f11a65ae4e987667c2051d2
                integrationType: custom
    switchboardOfferControlFailureEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: switchboard:offerControl:failure
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            error:
              code: switchboard_invalid_target
              message: Cannot offer control to the active switchboard integration.
    switchboardPassControlEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: switchboard:passControl
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
    switchboardPassControlFailureEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: switchboard:passControl:failure
          payload:
            conversation:
              id: f52b01137aa6c250bc7251fa
              type: personal
              activeSwitchboardIntegration:
                id: 5eecde2dcdbffb08f5c3ed37
                name: bot
                integrationId: 5f11a650e4e987667c2051d1
                integrationType: custom
            error:
              code: switchboard_invalid_target
              message: Switchboard invalid target
    userMergeEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: user:merge
          payload:
            mergedUsers:
              surviving:
                id: 26508c10541a4b0ff472e5e2
                externalId: "912382197"
              discarded:
                id: 1a64f7f75028fef55f815007
                externalId: "912382198"
            reason: api
    userUpdateEvent:
      value:
        app:
          id: 5ebee0975ac5304b664a12fa
        webhook:
          id: 5f4eaef81e3dcc117c7ba48a
          version: v2
        events:
        - id: 5f74a0d52b5315fc007e798a
          createdAt: 2020-09-30T15:14:29.834Z
          type: user:update
          payload:
            user:
              id: 26508c10541a4b0ff472e5e2
              externalId: 9128asd219s7
            reason: authentication
            source:
              type: web
              integrationId: 5ecff63ffc3ab25f4561c8a0
  parameters:
    pageQuery:
      description: Contains parameters for applying cursor pagination.
      explode: true
      in: query
      name: page
      required: false
      schema:
        $ref: '#/components/schemas/page'
      style: deepObject
    appFilterQuery:
      $ref: '#/components/parameters/appListFilter'
      description: Contains parameters for filtering the results.
      explode: true
      in: query
      name: filter
      required: false
      schema:
        properties:
          serviceAccountId:
            description: When specified, lists only the apps that the service account
              has access to.
            type: string
        title: appListFilter
        type: object
      style: deepObject
    appId:
      description: Identifies the app.
      explode: false
      in: path
      name: appId
      required: true
      schema:
        example: 5d8cff3cd55b040010928b5b
        type: string
      style: simple
    keyId:
      description: The id of the key.
      explode: false
      in: path
      name: keyId
      required: true
      schema:
        example: int_5d8cff3cd55b040010928b5b
        type: string
      style: simple
    accessQuery:
      description: The access level for the attachment. Currently the available access
        levels are public and private. If you are a licensed Zendesk customer, you
        must use public. Private is not supported.
      explode: true
      in: query
      name: access
      required: true
      schema:
        default: public
        example: public
        type: string
      style: form
    forQuery:
      description: Specifies the intended container for the attachment, to enable
        automatic attachment deletion (on deletion of associated message, conversation
        or user). For now, only message is supported. See [Attachments for Messages](#section/Attachments-for-Messages)
        for details.
      explode: true
      in: query
      name: for
      required: false
      schema:
        example: message
        type: string
      style: form
    conversationIdQuery:
      description: Links the attachment getting uploaded to the conversation ID.
      explode: true
      in: query
      name: conversationId
      required: false
      schema:
        example: c616a583e4c240a871818541
        type: string
      style: form
    conversationFilterQuery:
      $ref: '#/components/parameters/conversationListFilter'
      description: Contains parameters for filtering the results.
      explode: true
      in: query
      name: filter
      required: true
      schema:
        properties:
          userId:
            description: The user's id. One of `userId` or `userExternalId` is required,
              but not both.
            type: string
          userExternalId:
            description: The external Id of the user. One of `userId` or `userExternalId`
              is required, but not both.
            type: string
        title: conversationListFilter
        type: object
      style: deepObject
    conversationId:
      description: Identifies the conversation.
      explode: false
      in: path
      name: conversationId
      required: true
      schema:
        example: 029c31f25a21b47effd7be90
        type: string
      style: simple
    messageId:
      description: The id of the message.
      explode: false
      in: path
      name: messageId
      required: true
      schema:
        example: 029c31f25a21b47effd7be90
        type: string
      style: simple
    integrationFilterQuery:
      $ref: '#/components/parameters/integrationListFilter'
      description: Contains parameters for filtering the results.
      explode: true
      in: query
      name: filter
      required: false
      schema:
        properties:
          types:
            description: Comma-separated list of types to return. If omitted, all
              types are returned.
            example: android,ios
            type: string
        title: integrationListFilter
        type: object
      style: deepObject
    integrationId:
      description: The id of the integration.
      explode: false
      in: path
      name: integrationId
      required: true
      schema:
        example: 029c31f25a21b47effd7be90
        type: string
      style: simple
    webhookId:
      description: The id of the webhook.
      explode: false
      in: path
      name: webhookId
      required: true
      schema:
        example: 029c31f25a21b47effd7be90
        type: string
      style: simple
    switchboardId:
      description: Identifies the switchboard.
      explode: false
      in: path
      name: switchboardId
      required: true
      schema:
        example: 5d8cff3cd55b040010928b5b
        type: string
      style: simple
    switchboardIntegrationId:
      description: Identifies the switchboard integration.
      explode: false
      in: path
      name: switchboardIntegrationId
      required: true
      schema:
        example: 5d8cff3cd55b040010928b5b
        type: string
      style: simple
    userIdOrExternalId:
      description: The user's id or externalId.
      explode: false
      in: path
      name: userIdOrExternalId
      required: true
      schema:
        example: 42589ad070d43be9b00ff7e5
        type: string
      style: simple
    clientId:
      description: The client's id.
      explode: false
      in: path
      name: clientId
      required: true
      schema:
        example: 5d8cff3cd55b040010928b5b
        type: string
      style: simple
    deviceId:
      description: The device's id.
      explode: false
      in: path
      name: deviceId
      required: true
      schema:
        example: 5d8cff3cd55b040010928b5b
        type: string
      style: simple
    clientIdQuery:
      description: Your integration’s unique identifier
      explode: true
      in: query
      name: client_id
      required: true
      schema:
        example: 5e4af71a81966cfff3ef6550
        type: string
      style: form
    responseTypeQuery:
      description: For now the only acceptable value is code.
      explode: true
      in: query
      name: response_type
      required: true
      schema:
        example: code
        type: string
      style: form
    stateQuery:
      description: You may pass in any arbitrary string value here which will be returned
        to you along with the code via browser redirect.
      explode: true
      in: query
      name: state
      required: false
      schema:
        example: Pending
        type: string
      style: form
    redirectUriQuery:
      description: You may pass in a redirect_uri to determine which URI the response
        is redirected to. This URI must be contained in the list configured by your
        integration. If this option is not passed, the first URI present in the list
        will be used.
      explode: true
      in: query
      name: redirect_uri
      required: false
      schema:
        example: https://example.org
        type: string
      style: form
  requestBodies:
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
      required: true
    AppKeyCreateBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppKeyCreateBody'
      required: true
    IntegrationApiKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IntegrationApiKey'
      required: true
  schemas:
    page:
      properties:
        after:
          description: "A record id. Results will only contain the records that come\
            \ after the specified record. \nOnly one of `after` or `before` can be\
            \ provided, not both.\n"
          example: 5e1606762556d93e9c176f69
          maxLength: 24
          minLength: 24
          type: string
        before:
          description: |
            A record id. Results will only contain the records that come before the specified record.
            Only one of `after` or `before` can be provided, not both.
          example: 5e1606762556d93e9c176f69
          maxLength: 24
          minLength: 24
          type: string
        size:
          default: 25
          description: The number of records to return. Does not apply to the `listMessages`
            endpoint.
          example: 10
          maximum: 100
          minimum: 1
          type: integer
      type: object
    displayName:
      maxLength: 100
      minLength: 1
      nullable: true
      type: string
    appSettings:
      description: Customizable app settings.
      example:
        attachmentsAccess: public
        conversationRetentionSeconds: 0
        ignoreAutoConversationStart: true
        useAnimalNames: true
        echoPostback: true
        appLocalizationEnabled: true
        multiConvoEnabled: true
        attachmentsTokenExpirationSeconds: 64028
        maskCreditCardNumbers: true
      properties:
        conversationRetentionSeconds:
          description: "Number of seconds of inactivity before a conversation’s messages\
            \ \nwill be automatically deleted. See \n[Conversation Retention Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds)\n\
            for more information.\n"
          minimum: 0
          type: integer
        maskCreditCardNumbers:
          description: "A boolean specifying whether credit card numbers should be\
            \ masked \nwhen sent through Sunshine Conversations.\n"
          type: boolean
        useAnimalNames:
          description: "A boolean specifying whether animal names should be used for\
            \ \nunnamed users. See the \n[user naming guide](https://docs.smooch.io/guide/receiving-messages/#message-author-name)\n\
            for details.\n"
          type: boolean
        echoPostback:
          description: "A boolean specifying whether a message should be added to\
            \ the conversation \nhistory when a postback button is clicked. See \n\
            [Echo Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks)\n\
            for more information.\n"
          type: boolean
        ignoreAutoConversationStart:
          description: "A boolean specifying whether a non message event coming from\
            \ a channel will \ntrigger a \n[start conversation](https://docs.smooch.io/rest/#section/Webhook-Triggers)\n\
            event and count as a monthly active user (MAU).\n<aside class=\"notice\"\
            >Calling <code>startConversation()</code> (or equivalent) from the Android,\
            \ \niOS or Web SDK will count as a MAU, regardless of the value of this\
            \ setting.</aside>\n"
          type: boolean
        multiConvoEnabled:
          description: |
            A boolean specifying whether users are allowed to be part of several conversations.
            Enabling `multiConvo` is **irreversible**.
          type: boolean
        attachmentsAccess:
          description: |
            A string specifying whether attachments should be stored in a publicly or privately accessible cloud storage.
            attachmentsAccess is set to public by default but can be modified to private.
          example: public
          type: string
        attachmentsTokenExpirationSeconds:
          description: |
            Number of seconds representing the expiration time of the generated media tokens for private attachments. The JWT will be valid for 2 hours by default.
          example: 64028
          type: integer
        appLocalizationEnabled:
          description: |
            A boolean specifying whether the messages authored by the Sunshine Conversations platform should be localized.
          type: boolean
      type: object
    metadata:
      description: "Flat object containing custom properties. Strings, numbers and\
        \ booleans \nare the only supported format that can be passed to metadata.\n\
        The metadata is limited to 4KB in size.\n"
      example:
        lang: en-ca
      nullable: true
      type: object
    app:
      example:
        settings:
          attachmentsAccess: public
          conversationRetentionSeconds: 0
          ignoreAutoConversationStart: true
          useAnimalNames: true
          echoPostback: true
          appLocalizationEnabled: true
          multiConvoEnabled: true
          attachmentsTokenExpirationSeconds: 64028
          maskCreditCardNumbers: true
        metadata:
          lang: en-ca
        displayName: My App
        id: 5d8cff3cd55b040010928b5b
      properties:
        id:
          description: A canonical ID that can be used to retrieve the Sunshine Conversations
            app.
          example: 5d8cff3cd55b040010928b5b
          type: string
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The friendly name of the app.
          example: My App
        settings:
          $ref: '#/components/schemas/appSettings'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      type: object
    meta:
      description: Response metadata.
      example:
        beforeCursor: 55c8d9758590aa1900b9b9f6
        afterCursor: 55c8d9758590aa1900b9b9f6
        hasMore: true
      properties:
        hasMore:
          description: A flag that indicates if there are more records that can be
            fetched.
          type: boolean
        afterCursor:
          description: "A record id that can be used as a `page[after]` parameter\
            \ in a new request to get the next page. \nNot specified if there are\
            \ no subsequent pages.\n"
          example: 55c8d9758590aa1900b9b9f6
          type: string
        beforeCursor:
          description: "A record id that can be used as a `page[before]` parameter\
            \ in a new request to get the previous page. \nNot specified if there\
            \ are no previous pages.\n"
          example: 55c8d9758590aa1900b9b9f6
          type: string
      type: object
    links:
      description: Previous and next page links, if they exist.
      example:
        next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
        prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
      properties:
        prev:
          description: A link to the previous page. Not specified if there are no
            previous pages.
          example: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
          type: string
        next:
          description: A link to the next page. Not specified if there are no subsequent
            pages.
          example: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          type: string
      type: object
    appListResponse:
      example:
        meta:
          beforeCursor: 55c8d9758590aa1900b9b9f6
          afterCursor: 55c8d9758590aa1900b9b9f6
          hasMore: true
        links:
          next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
        apps:
        - settings:
            attachmentsAccess: public
            conversationRetentionSeconds: 0
            ignoreAutoConversationStart: true
            useAnimalNames: true
            echoPostback: true
            appLocalizationEnabled: true
            multiConvoEnabled: true
            attachmentsTokenExpirationSeconds: 64028
            maskCreditCardNumbers: true
          metadata:
            lang: en-ca
          displayName: My App
          id: 5d8cff3cd55b040010928b5b
        - settings:
            attachmentsAccess: public
            conversationRetentionSeconds: 0
            ignoreAutoConversationStart: true
            useAnimalNames: true
            echoPostback: true
            appLocalizationEnabled: true
            multiConvoEnabled: true
            attachmentsTokenExpirationSeconds: 64028
            maskCreditCardNumbers: true
          metadata:
            lang: en-ca
          displayName: My App
          id: 5d8cff3cd55b040010928b5b
      properties:
        apps:
          description: List of returned apps.
          items:
            $ref: '#/components/schemas/app'
          type: array
        meta:
          $ref: '#/components/schemas/meta'
        links:
          $ref: '#/components/schemas/links'
      type: object
    appCreateBody:
      properties:
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The friendly name of the app.
          example: My App
          nullable: false
        settings:
          $ref: '#/components/schemas/appSettings'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - displayName
      title: AppCreateBody
      type: object
    appResponse:
      example:
        app: ""
      properties:
        app:
          allOf:
          - $ref: '#/components/schemas/app'
          description: The app.
      title: AppResponse
      type: object
    appUpdateBody:
      properties:
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The friendly name of the app.
          example: My App
          nullable: false
        settings:
          $ref: '#/components/schemas/appSettings'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      type: object
    appKey:
      example:
        displayName: Key 1
        id: app_5723a347f82ba0516cb4ea34
        secret: 5XJ85yjUtRcaQu_pDINblPZb
      properties:
        id:
          description: The unique ID of the API key, used when signing JWTs or accessing
            the API using Basic Authentication.
          example: app_5723a347f82ba0516cb4ea34
          type: string
        displayName:
          description: The name of the API key.
          example: Key 1
          type: string
        secret:
          description: The secret of the API key, used when signing JWTs or accessing
            the API using Basic Authentication
          example: 5XJ85yjUtRcaQu_pDINblPZb
          type: string
      type: object
    appKeyListResponse:
      example:
        keys:
        - displayName: Key 1
          id: app_5723a347f82ba0516cb4ea34
          secret: 5XJ85yjUtRcaQu_pDINblPZb
        - displayName: Key 1
          id: app_5723a347f82ba0516cb4ea34
          secret: 5XJ85yjUtRcaQu_pDINblPZb
      properties:
        keys:
          description: List of returned keys.
          items:
            $ref: '#/components/schemas/appKey'
          type: array
      type: object
    appKeyResponse:
      example:
        key: ""
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/appKey'
          description: The created key object.
      title: AppKeyResponse
      type: object
    attachmentUploadBody:
      properties:
        source:
          format: binary
          type: string
      required:
      - source
      type: object
    attachmentSchema:
      properties:
        mediaUrl:
          description: Uploaded attachment’s url
          example: https://smooch.io/rocks.smooch.media-dev/apps/5ec41c54fe13cc5ac404bedc/conversations/c616a583e4c240a871818541/TmYMVQUBNsQRItX4fKf4aC-T/Screen%20Shot%202020-09-02%20at%204.04.41%20PM.png
          type: string
        mediaType:
          description: Uploaded attachment's media type
          example: image/png
          type: string
      type: object
    attachmentResponse:
      example:
        attachment: ""
      properties:
        attachment:
          allOf:
          - $ref: '#/components/schemas/attachmentSchema'
          description: The uploaded attachment object.
      title: AttachmentResponse
      type: object
    attachmentDeleteBody:
      properties:
        mediaUrl:
          description: The media URL used for a file or image message.
          example: https://s3.amazonaws.com/document.pdf
          type: string
      required:
      - mediaUrl
      type: object
    attachmentMediaTokenBody:
      properties:
        paths:
          description: An array of strings representing the list of attachment paths
            used to generate the media JWT. One token will be generated for each path.
            Each token will be valid for 2 hours by default. This value can be modified,
            see [App Settings](#operation/createApp) for more information.
          items:
            example: /apps/5ec41c54fe13cc5ac404bedc
            type: string
          type: array
      required:
      - paths
      type: object
    attachmentMediaTokenResponse:
      example:
        tokens:
          /apps/5ec41c54fe13cc5ac404bedc: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IjM3NzdBNUM3LUI3QUQtNDEyMC1BNEVDLUNBNzk1ODlDRTYxNSJ9.eyJwYXRoIjoiL2FwcHMvNWVkYTk3ZDBhNmQ5ZmUwMDBmN2U2ODQyIiwiZXhwIjoxNTkzMjA2MzEzLCJpYXQiOjE1OTMxOTkxMTN9.R1i7e5YgRHv_QjUqUcP9c5xa4VgJ5aen675V84r1euCjNz165qqkZaep6of7aXNBKsZ29AI1CgbVt_nPn3ZsYTBc1cQ96ucqTv8tFR0FHf20-oR-_1egdyyLqJjxb0UI1wGZPGCP8mEs3mQwMu4lvZMF9vaty1Ye8wy-lPAPYFuZMb1rCES0QT6QUOAn45hAAfdT1zKqQ8ImV5eWVi6m0ENqV-JjExsiZ2mAMwyguDJ5yJUQLGKOV3f_Our1fVWfit5cGoMk-97o3009o628gVfSZVzPuvdNIfQOb0UUr_ELsI2qbY_Ju4REpSqYwdkjvSd3T20baf5K7_FGOrxPQitHAZojQAdlRK3mB-kC3IbVa93YFBcLK5UbRXnJYAo24UH828vU-MLgRrgzD6oVpcxNk8yyaLThJpTynO9Eoi0vKJ0m-_3A1ASKzYrR6ZZZWmRsFtZVtlpS21oYuO2tvS4EkbM8AhH4nh6V8oQUkQtvYIZKkEOadc0AFTjbv-le35hHLmHBZigUTRoZKokeglSDKr0FwDZylp7V3O8l6X0EhOU0BCoP1UYrEf8GjPdSLvu0Mno_k6hFw2Hx9DTdvnybZYroMkG31To2nmVhPglZ4FCswGV85HcqCcWQjhugFmB--9aE19G-OGOVFJfH6rFp0_cB4AxM9kSHQsWyuUs
      properties:
        tokens:
          additionalProperties:
            type: string
          description: Object with key value pair where the key is the path and the
            value is the media JWT.
          example:
            /apps/5ec41c54fe13cc5ac404bedc: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6IjM3NzdBNUM3LUI3QUQtNDEyMC1BNEVDLUNBNzk1ODlDRTYxNSJ9.eyJwYXRoIjoiL2FwcHMvNWVkYTk3ZDBhNmQ5ZmUwMDBmN2U2ODQyIiwiZXhwIjoxNTkzMjA2MzEzLCJpYXQiOjE1OTMxOTkxMTN9.R1i7e5YgRHv_QjUqUcP9c5xa4VgJ5aen675V84r1euCjNz165qqkZaep6of7aXNBKsZ29AI1CgbVt_nPn3ZsYTBc1cQ96ucqTv8tFR0FHf20-oR-_1egdyyLqJjxb0UI1wGZPGCP8mEs3mQwMu4lvZMF9vaty1Ye8wy-lPAPYFuZMb1rCES0QT6QUOAn45hAAfdT1zKqQ8ImV5eWVi6m0ENqV-JjExsiZ2mAMwyguDJ5yJUQLGKOV3f_Our1fVWfit5cGoMk-97o3009o628gVfSZVzPuvdNIfQOb0UUr_ELsI2qbY_Ju4REpSqYwdkjvSd3T20baf5K7_FGOrxPQitHAZojQAdlRK3mB-kC3IbVa93YFBcLK5UbRXnJYAo24UH828vU-MLgRrgzD6oVpcxNk8yyaLThJpTynO9Eoi0vKJ0m-_3A1ASKzYrR6ZZZWmRsFtZVtlpS21oYuO2tvS4EkbM8AhH4nh6V8oQUkQtvYIZKkEOadc0AFTjbv-le35hHLmHBZigUTRoZKokeglSDKr0FwDZylp7V3O8l6X0EhOU0BCoP1UYrEf8GjPdSLvu0Mno_k6hFw2Hx9DTdvnybZYroMkG31To2nmVhPglZ4FCswGV85HcqCcWQjhugFmB--9aE19G-OGOVFJfH6rFp0_cB4AxM9kSHQsWyuUs
          type: object
      title: AttachmentMediaTokenResponse
      type: object
    conversationType:
      description: The type of the conversation.
      enum:
      - personal
      - sdkGroup
      example: personal
      type: string
    name:
      description: Identifier for use in control transfer protocols. Restricted to
        alphanumeric characters, `-` and `_`.
      example: bot
      maxLength: 128
      type: string
    switchboardIntegrationId:
      description: Id of the integration that should deliver events routed by the
        switchboard.
      example: 5ef21b86e933b7355c11c605
      type: string
    switchboardIntegrationType:
      description: Type of integration that should deliver events routed by the switchboard.
        If referencing an OAuth integration, the clientId issued by Sunshine Conversations
        during the OAuth partnership process will be the value of integrationType.
      example: zd:agentWorkspace
      type: string
    switchboardIntegrationWebhook:
      properties:
        id:
          description: The unique ID of the switchboard integration.
          example: 5ef21b86e933b7355c11c604
          type: string
        name:
          description: Identifier for use in control transfer protocols. Restricted
            to alphanumeric characters, `-` and `_`.
          example: bot
          maxLength: 128
          type: string
        integrationId:
          description: Id of the integration that should deliver events routed by
            the switchboard.
          example: 5ef21b86e933b7355c11c605
          type: string
        integrationType:
          description: Type of integration that should deliver events routed by the
            switchboard. If referencing an OAuth integration, the clientId issued
            by Sunshine Conversations during the OAuth partnership process will be
            the value of integrationType.
          example: zd:agentWorkspace
          type: string
      type: object
    conversationTruncated:
      properties:
        id:
          description: The unique ID of the conversation.
          example: c93bb9c14dde8ffb94564eae
          type: string
        type:
          $ref: '#/components/schemas/conversationType'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
        activeSwitchboardIntegration:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegrationWebhook'
          description: The current switchboard integration that is in control of the
            conversation. This field is omitted if no `activeSwitchboardIntegration`
            exists for the conversation.
          nullable: true
        pendingSwitchboardIntegration:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegrationWebhook'
          description: The switchboard integration that is awaiting control. This
            field is omitted if no switchboard integration has been previously offered
            control.
          nullable: true
      type: object
    description:
      description: A short text describing the conversation.
      example: Conversation between Rogers and Carl.
      maxLength: 100
      minLength: 1
      nullable: true
      type: string
    icon:
      description: A custom conversation icon url. The image must be in either JPG,
        PNG, or GIF format
      example: https://www.gravatar.com/image.jpg
      format: uri
      maxLength: 2048
      minLength: 1
      nullable: true
      type: string
    conversation:
      allOf:
      - $ref: '#/components/schemas/conversationTruncated'
      - $ref: '#/components/schemas/conversation_allOf'
    conversationListResponse:
      example:
        meta:
          beforeCursor: 55c8d9758590aa1900b9b9f6
          afterCursor: 55c8d9758590aa1900b9b9f6
          hasMore: true
        links:
          next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
        conversations:
        - null
        - null
      properties:
        conversations:
          description: List of returned conversations.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
        meta:
          $ref: '#/components/schemas/meta'
        links:
          $ref: '#/components/schemas/links'
      type: object
    participantSubSchema:
      anyOf:
      - $ref: '#/components/schemas/ParticipantWithUserId'
      - $ref: '#/components/schemas/ParticipantWithUserExternalId'
    conversationCreateBody:
      properties:
        type:
          $ref: '#/components/schemas/conversationType'
        participants:
          description: |
            The users participating in the conversation. For `personal` conversations, this field is required with a length of exactly 1. For `sdkGroup` conversations, must have a length less than or equal to 10.
            Can be omitted to have a conversation with no participants if the type is `sdkGroup`.
          items:
            $ref: '#/components/schemas/participantSubSchema'
          maxItems: 10
          type: array
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: |
            A friendly name for the conversation, may be displayed to the business or
            the user.
          example: My conversation
        description:
          description: A short text describing the conversation.
          example: Conversation between Rogers and Carl.
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
        iconUrl:
          description: A custom conversation icon url. The image must be in either
            JPG, PNG, or GIF format
          example: https://www.gravatar.com/image.jpg
          format: uri
          maxLength: 2048
          minLength: 1
          nullable: true
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - type
      title: ConversationCreateBody
      type: object
    conversationResponse:
      example:
        conversation: ""
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversation'
          description: The conversation.
      title: ConversationResponse
      type: object
    conversationUpdateBody:
      properties:
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: |
            A friendly name for the conversation, may be displayed to the business or
            the user.
          example: My conversation
        description:
          description: A short text describing the conversation.
          example: Conversation between Rogers and Carl.
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
        iconUrl:
          description: A custom conversation icon url. The image must be in either
            JPG, PNG, or GIF format
          example: https://www.gravatar.com/image.jpg
          format: uri
          maxLength: 2048
          minLength: 1
          nullable: true
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      type: object
    participantJoinBody:
      allOf:
      - $ref: '#/components/schemas/participantSubSchema'
    clientType:
      description: The type of integration that the client represents. Can be any
        of the supported integration types, or sdk for integrations of type ios, android,
        unity and web.
      enum:
      - apple
      - gbm
      - googlercs
      - instagram
      - kakao
      - line
      - mailgun
      - messagebird
      - messenger
      - slackconnect
      - sdk
      - telegram
      - twilio
      - twitter
      - viber
      - wechat
      - whatsapp
      example: telegram
      type: string
    clientAssociation:
      example:
        clientId: 42589ad070d43be9b00ff7e5
        type: telegram
      properties:
        type:
          $ref: '#/components/schemas/clientType'
        clientId:
          description: The id of the client being referenced.
          example: 42589ad070d43be9b00ff7e5
          type: string
      type: object
    participant:
      example:
        unreadCount: 0
        userExternalId: your-own-id
        id: c93bb9c14dde8ffb94564eae
        userId: 42589ad070d43be9b00ff7e5
        lastRead: 2019-01-14T18:55:12.515Z
        clientAssociations:
        - clientId: 42589ad070d43be9b00ff7e5
          type: telegram
        - clientId: 42589ad070d43be9b00ff7e5
          type: telegram
      properties:
        id:
          description: The unique ID of the participant.
          example: c93bb9c14dde8ffb94564eae
          type: string
        userId:
          description: The id of the associated user.
          example: 42589ad070d43be9b00ff7e5
          type: string
        unreadCount:
          description: Number of messages the user has not yet read.
          example: 0
          type: integer
        clientAssociations:
          description: |
            Represents the clients that are active in the conversation for a particular
            user. A participant can have multiple clientAssociations in the case of
            channel transfer, business initiated conversations, or identified users.
            The order of the array indicates how recently a client has interacted with
            the conversation, with the most recent client first. The first item in the
            array is considered to be the user's primary client for that conversation,
            and will be selected first for message delivery.
          items:
            $ref: '#/components/schemas/clientAssociation'
          type: array
        userExternalId:
          description: The externalId of the associated user.
          example: your-own-id
          nullable: true
          type: string
        lastRead:
          description: A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ
            representing the latest message the user has read.
          example: 2019-01-14T18:55:12.515Z
          nullable: true
          type: string
      type: object
    participantListResponse:
      description: List of returned participants.
      example:
        meta:
          beforeCursor: 55c8d9758590aa1900b9b9f6
          afterCursor: 55c8d9758590aa1900b9b9f6
          hasMore: true
        links:
          next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
        participants:
        - unreadCount: 0
          userExternalId: your-own-id
          id: c93bb9c14dde8ffb94564eae
          userId: 42589ad070d43be9b00ff7e5
          lastRead: 2019-01-14T18:55:12.515Z
          clientAssociations:
          - clientId: 42589ad070d43be9b00ff7e5
            type: telegram
          - clientId: 42589ad070d43be9b00ff7e5
            type: telegram
        - unreadCount: 0
          userExternalId: your-own-id
          id: c93bb9c14dde8ffb94564eae
          userId: 42589ad070d43be9b00ff7e5
          lastRead: 2019-01-14T18:55:12.515Z
          clientAssociations:
          - clientId: 42589ad070d43be9b00ff7e5
            type: telegram
          - clientId: 42589ad070d43be9b00ff7e5
            type: telegram
      properties:
        participants:
          items:
            $ref: '#/components/schemas/participant'
          type: array
        meta:
          $ref: '#/components/schemas/meta'
        links:
          $ref: '#/components/schemas/links'
      type: object
    participantLeaveBody:
      oneOf:
      - $ref: '#/components/schemas/ParticipantLeaveBodyUserId'
      - $ref: '#/components/schemas/ParticipantLeaveBodyUserExternalId'
      - $ref: '#/components/schemas/ParticipantLeaveBodyParticipantId'
      x-one-of-name: ParticipantLeaveBody
    author:
      description: The author of the message.
      example:
        avatarUrl: ""
        displayName: Steve
        userExternalId: your-own-id
        type: business
        userId: 5963c0d619a30a2e00de36b8
        subtypes:
        - AI
        - AI
      properties:
        type:
          description: "The author type. Either \"user\" (representing the end user)\
            \ \nor \"business\" (sent on behalf of the business).\n"
          enum:
          - business
          - user
          example: business
          type: string
        subtypes:
          description: "A string array that indicates the author's subtypes. Messages\
            \ from \"business\" type with an \"AI\" subtype \nare generated by AI\
            \ and a disclaimer is appended to the text of the message sent to the\
            \ customer. \nFor third-party channels, the disclaimer is applied for\
            \ image, file, and text message types.\n"
          items:
            enum:
            - AI
            maxItems: 1
            minItems: 1
            type: string
            uniqueItems: true
          type: array
        userId:
          description: The id of the user. Only supported when `type` is user.
          example: 5963c0d619a30a2e00de36b8
          type: string
        userExternalId:
          description: The externalId of the user. Only supported when `type` is user.
          example: your-own-id
          type: string
          writeOnly: true
        displayName:
          description: The display name of the message author.
          example: Steve
          type: string
        avatarUrl:
          allOf:
          - $ref: '#/components/schemas/icon'
          description: A custom message icon URL. The image must be JPG, PNG, or GIF
            format.
          nullable: false
      required:
      - type
      type: object
    buy:
      properties:
        type:
          default: buy
          description: The type of action.
          type: string
        text:
          description: The button text.
          example: Buy vinegar
          type: string
        amount:
          description: The amount being charged. It needs to be specified in cents
            and is an integer (9.99$ -> 999).
          example: 8000
          type: integer
        currency:
          description: An ISO 4217 standard currency code in lowercase. Used for actions
            of type buy.
          example: CAD
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - amount
      - text
      - type
      type: object
    extraChannelOptions:
      description: Extra options to pass directly to the channel API.
      properties:
        messenger:
          $ref: '#/components/schemas/extraChannelOptions_messenger'
      type: object
    link:
      description: A link action will open the provided URI when tapped.
      properties:
        type:
          default: link
          description: The type of action.
          type: string
        uri:
          description: The action URI. This is the link that will be used in the clients
            when clicking the button.
          type: string
        text:
          description: The button text.
          type: string
        default:
          description: Boolean value indicating whether the action is the default
            action for a message item in Facebook Messenger.
          type: boolean
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
        extraChannelOptions:
          $ref: '#/components/schemas/extraChannelOptions'
      required:
      - text
      - type
      - uri
      type: object
    locationRequest:
      description: A location request action will prompt the user to share their location.
      properties:
        type:
          default: locationRequest
          description: The type of action.
          type: string
        text:
          description: The button text.
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - text
      - type
      type: object
    postback:
      properties:
        type:
          default: postback
          description: The type of action.
          type: string
        text:
          description: The button text.
          type: string
        payload:
          description: The payload of a postback or reply button.
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - payload
      - text
      - type
      type: object
    reply:
      properties:
        type:
          description: The type of action.
          type: string
        text:
          description: The button text. We recommend a non-empty value because some
            channels may not support empty ones. Text longer than 20 characters will
            be truncated on Facebook Messenger, and longer than 40 characters will
            be truncated on Web Messenger, iOS, and Android.
          type: string
        payload:
          description: A string payload to help you identify the action context. Used
            when posting the reply. You can also use metadata for more complex needs.
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
        iconUrl:
          description: An icon to render next to the reply option.
          type: string
      required:
      - payload
      - text
      - type
      type: object
    webview:
      description: When a webview actions is clicked/tapped, the provided URI will
        be loaded in a webview. Channels that do not support webviews will open the
        fallback URI instead.
      properties:
        type:
          description: The type of action.
          type: string
        uri:
          description: The webview URI. This is the URI that will open in the webview
            when clicking the button.
          format: uri
          type: string
        text:
          description: The button text.
          type: string
        default:
          description: Boolean value indicating whether the action is the default
            action for a message item in Facebook Messenger.
          type: boolean
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
        extraChannelOptions:
          $ref: '#/components/schemas/extraChannelOptions'
        size:
          description: The size to display a webview. Used for actions of type webview.
          enum:
          - compact
          - tall
          - full
          type: string
        fallback:
          description: The fallback uri for channels that don’t support webviews.
            Used for actions of type webview.
          type: string
        openOnReceive:
          description: Boolean value indicating if the webview should open automatically.
            Only one action per message can be set to true. Currently only supported
            on the Web Messenger.
          type: boolean
      required:
      - fallback
      - text
      - type
      - uri
      type: object
    action:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/buy'
      - $ref: '#/components/schemas/link'
      - $ref: '#/components/schemas/locationRequest'
      - $ref: '#/components/schemas/postback'
      - $ref: '#/components/schemas/reply'
      - $ref: '#/components/schemas/webview'
      x-one-of-name: Action
    textMessage:
      properties:
        type:
          default: text
          description: The type of message.
          type: string
        text:
          description: The text content of the message. Optional only if actions are
            provided.
          example: Hello!
          maxLength: 4096
          type: string
        actions:
          description: Array of message actions.
          items:
            $ref: '#/components/schemas/action'
          type: array
        payload:
          description: The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons)
            response message.
          type: string
      required:
      - type
      type: object
    actionSubset:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/buy'
      - $ref: '#/components/schemas/link'
      - $ref: '#/components/schemas/postback'
      - $ref: '#/components/schemas/webview'
      x-one-of-name: ActionSubset
    item:
      properties:
        title:
          description: The title of the item.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The description of the item.
          maxLength: 128
          type: string
        mediaUrl:
          description: The image url attached to the item.
          format: uri
          maxLength: 2048
          type: string
        mediaType:
          description: The MIME type for any image attached in the mediaUrl.
          maxLength: 128
          type: string
        altText:
          description: An optional description of the media for accessibility purposes.
            The field will be saved by default with the file name as the value.
          maxLength: 128
          type: string
        size:
          description: The size of the image.
          enum:
          - compact
          - large
          type: string
        actions:
          description: An array of objects representing the actions associated with
            the item.
          items:
            $ref: '#/components/schemas/actionSubset'
          maxItems: 3
          minItems: 1
          type: array
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - actions
      - title
      type: object
    carouselMessage:
      description: Carousel messages are a horizontally scrollable set of items that
        may each contain text, an image, and message actions. Not all messaging channels
        fully support carousel messages; currently only Facebook Messenger, LINE,
        Telegram, Viber, the Web Messenger, the Android SDK and the iOS SDK cover
        the full functionality. For all other platforms a carousel message is rendered
        as raw text. The raw text fallback does not include any images or postback
        message actions.
      properties:
        type:
          default: carousel
          description: The type of message.
          type: string
        text:
          description: The fallback text message used when carousel messages are not
            supported by the channel.
          readOnly: true
          type: string
        items:
          description: An array of objects representing the items associated with
            the message. Only present in carousel and list type messages.
          items:
            $ref: '#/components/schemas/item'
          maxItems: 10
          minItems: 1
          type: array
        displaySettings:
          $ref: '#/components/schemas/carouselMessage_displaySettings'
      required:
      - items
      - type
      type: object
    fileMessage:
      properties:
        type:
          default: file
          description: The type of message.
          type: string
        mediaUrl:
          description: The URL for media, such as an image, attached to the message.
          format: uri
          type: string
        mediaSize:
          description: The size of the media.
          readOnly: true
          type: number
        mediaType:
          description: The media type of the file.
          readOnly: true
          type: string
        altText:
          description: An optional description of the file for accessibility purposes.
            The field will be saved by default with the file name as the value.
          maxLength: 128
          type: string
        text:
          description: The text content of the message.
          type: string
      required:
      - mediaUrl
      - type
      type: object
    field:
      properties:
        type:
          description: The field type.
          enum:
          - email
          - select
          - text
          type: string
        name:
          description: The name of the field. Must be unique per form or formResponse.
          maxLength: 128
          minLength: 1
          type: string
        label:
          description: The label of the field. What the field is displayed as on Web
            Messenger.
          maxLength: 128
          minLength: 1
          type: string
        text:
          description: Specifies the response for a text field.
          maxLength: 256
          minLength: 1
          type: string
        email:
          description: Specifies the response for a email field.
          maxLength: 128
          minLength: 1
          type: string
        select:
          description: Array of objects representing the response for a field of type
            select. Form and formResponse messages only.
          items:
            type: object
          type: array
      required:
      - label
      - name
      - type
    formOptions:
      description: Array of objects representing options for a field of type select.
      items:
        properties:
          label:
            description: The label of the option. What the option is displayed as
              on Web Messenger.
            maxLength: 128
            minLength: 1
            type: string
          name:
            description: The name of the field. Must be unique per field.
            maxLength: 128
            minLength: 1
            type: string
        type: object
      maxItems: 200
      type: array
    formMessageField:
      allOf:
      - $ref: '#/components/schemas/field'
      - $ref: '#/components/schemas/formMessageField_allOf'
    formMessage:
      description: A form type message without text or actions. Only supported in
        the Web SDK.
      properties:
        type:
          default: form
          description: The type of message.
          type: string
        submitted:
          description: Flag which states whether the form is submitted.
          readOnly: true
          type: boolean
        blockChatInput:
          description: true if the message should block the chat input on Web Messenger.
          type: boolean
        fields:
          description: An array of objects representing fields associated with the
            message. Only present in form and formResponse messages.
          items:
            $ref: '#/components/schemas/formMessageField'
          maxItems: 20
          minItems: 1
          type: array
      required:
      - fields
      - type
      type: object
    formResponseMessageField:
      allOf:
      - $ref: '#/components/schemas/field'
      - $ref: '#/components/schemas/formResponseMessageField_allOf'
    formResponseMessage:
      description: A formResponse type message is a response to a form type message.
        formResponse type messages are only supported as responses to form messages
        on Web Messenger and cannot be sent via the API.
      properties:
        type:
          default: formResponse
          description: The type of message.
          type: string
        fields:
          description: Array of field objects that contain the submitted fields.
          items:
            $ref: '#/components/schemas/formResponseMessageField'
          maxItems: 20
          minItems: 1
          type: array
        textFallback:
          description: 'A string containing the `label: value` of all fields, each
            separated by a newline character.'
          readOnly: true
          type: string
      required:
      - fields
      - type
      type: object
    imageMessage:
      properties:
        type:
          default: image
          description: The type of message.
          type: string
        mediaUrl:
          description: The URL for media, such as an image, attached to the message.
          format: uri
          type: string
        mediaType:
          description: The type of media.
          maxLength: 128
          readOnly: true
          type: string
        mediaSize:
          description: The size of the media in bytes.
          readOnly: true
          type: number
        altText:
          description: An optional description of the image for accessibility purposes.
            The field will be saved by default with the file name as the value.
          maxLength: 128
          type: string
        text:
          description: The text content of the message. Optional only if actions are
            provided.
          type: string
        actions:
          description: Array of message actions.
          items:
            $ref: '#/components/schemas/action'
          type: array
      required:
      - mediaUrl
      - type
      type: object
    listMessage:
      description: |
        List messages are a vertically scrollable set of items that may each contain text, an image, and message actions. Not all messaging channels fully support list messages.
        * Facebook Messenger and WeChat have native support.
        * For LINE and our Android, iOS and Web SDK, Sunshine Conversations converts list messages to carousel.
        * On WhatsApp, Telegram and Twitter, Sunshine Conversations converts list messages to multiple rich messages.
        * On all other platforms, Sunshine Conversations converts list messages to raw text.
      properties:
        type:
          default: list
          description: The type of message.
          type: string
        items:
          description: An array of objects representing the items associated with
            the message. Only present in carousel and list type messages.
          items:
            $ref: '#/components/schemas/item'
          maxItems: 10
          minItems: 1
          type: array
        actions:
          description: An array of objects representing the actions associated with
            the message. The array length is limited by the third party channel.
          items:
            $ref: '#/components/schemas/actionSubset'
          maxItems: 10
          minItems: 1
          type: array
      required:
      - items
      - type
      title: ListMessage
      type: object
    locationMessage:
      description: A location type message includes the coordinates (latitude and
        longitude) of a location and an optional location object which can include
        the name and address of the location. Typically sent in response to a Location
        Request.
      properties:
        type:
          default: location
          description: The type of message.
          type: string
        text:
          description: The fallback text message used when location messages are not
            supported by the channel.
          readOnly: true
          type: string
        coordinates:
          $ref: '#/components/schemas/locationMessage_coordinates'
        location:
          $ref: '#/components/schemas/locationMessage_location'
      required:
      - coordinates
      - type
      type: object
    templateMessage:
      properties:
        type:
          default: template
          description: The type of message.
          type: string
        template:
          description: The whatsapp template message to send. For more information,
            consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates).
            `schema` must be set to `whatsapp`.
          type: object
      required:
      - template
      - type
      type: object
    content:
      discriminator:
        mapping:
          text: '#/components/schemas/textMessage'
          carousel: '#/components/schemas/carouselMessage'
          file: '#/components/schemas/fileMessage'
          form: '#/components/schemas/formMessage'
          formResponse: '#/components/schemas/formResponseMessage'
          image: '#/components/schemas/imageMessage'
          list: '#/components/schemas/listMessage'
          location: '#/components/schemas/locationMessage'
          template: '#/components/schemas/templateMessage'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/textMessage'
      - $ref: '#/components/schemas/carouselMessage'
      - $ref: '#/components/schemas/fileMessage'
      - $ref: '#/components/schemas/formMessage'
      - $ref: '#/components/schemas/formResponseMessage'
      - $ref: '#/components/schemas/imageMessage'
      - $ref: '#/components/schemas/listMessage'
      - $ref: '#/components/schemas/locationMessage'
      - $ref: '#/components/schemas/templateMessage'
      x-one-of-name: Content
    client:
      example:
        lastSeen: 2020-08-20T16:13:07.462Z
        avatarUrl: https://openapi-generator.tech
        displayName: Steve
        integrationId: 582dedf230e788746891281a
        externalId: your-own-id
        linkedAt: 2020-06-23T14:33:47.492Z
        raw: '{}'
        id: 5c9a34160c89726709136733
        type: telegram
        status: active
        info: '{}'
      properties:
        id:
          description: The unique ID of the client.
          example: 5c9a34160c89726709136733
          type: string
        type:
          $ref: '#/components/schemas/clientType'
        status:
          description: The client status. Indicates if the client is able to receive
            messages or not. Can be pending, inactive, active, or blocked.
          enum:
          - active
          - blocked
          - inactive
          - pending
          example: active
          type: string
        integrationId:
          description: The ID of the integration that the client was created for.
            Unused for clients of type sdk, as they incorporate multiple integrations.
          example: 582dedf230e788746891281a
          nullable: true
          type: string
        externalId:
          description: The ID of the user on an external channel. For example, the
            user’s phone number for Twilio, or their page-scoped user ID for Facebook
            Messenger. Applies only to non-SDK clients.
          example: your-own-id
          nullable: true
          type: string
        lastSeen:
          description: A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`
            representing the last time the user interacted with this client.
          example: 2020-08-20T16:13:07.462Z
          nullable: true
          type: string
        linkedAt:
          description: A timestamp signifying when the client was added to the user.
            Formatted as `YYYY-MM-DDThh:mm:ss.SSSZ`.
          example: 2020-06-23T14:33:47.492Z
          nullable: true
          type: string
        displayName:
          description: The user's display name on the channel.
          example: Steve
          nullable: true
          type: string
        avatarUrl:
          description: The URL for the user's avatar on the channel.
          format: uri
          nullable: true
          type: string
        info:
          description: A flat curated object with properties that vary for each client
            platform. All keys are optional and not guaranteed to be available.
          nullable: true
          type: object
        raw:
          description: An object with raw properties that vary for each client platform.
            All keys are optional and not guaranteed to be available.
          nullable: true
          type: object
      type: object
    device:
      properties:
        id:
          description: The unique ID of the device.
          example: de13bee15b51033b34162411
          type: string
        type:
          description: The type of integration that the device represents.
          enum:
          - android
          - ios
          - web
          type: string
        guid:
          description: A unique identifier for the device, generated client-side by
            the SDK.
          type: string
        clientId:
          description: The id of the client to which this device is associated.
          type: string
        status:
          description: The device status. Indicates if the device will receive push
            notifications or not.
          enum:
          - active
          - inactive
          type: string
        integrationId:
          description: The ID of the integration that the device was created for.
          type: string
        lastSeen:
          description: A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ
            representing the last time the user interacted with this device.
          type: string
        pushNotificationToken:
          description: The token used for push notifications on Android and iOS devices.
          nullable: true
          type: string
        info:
          description: A flat curated object with properties that vary for each SDK
            platform. All keys are optional and not guaranteed to be available.
          nullable: true
          type: object
        appVersion:
          description: Version of the mobile app in which the SDK is embedded. Not
            applicable for devices of type web.
          nullable: true
          type: string
      type: object
    source:
      description: The source of the message.
      example:
        originalMessageTimestamp: 2019-03-21T18:45:53.720Z
        integrationId: de13bee15b51033b34162411
        client: ""
        originalMessageId: 5f40256af057d0000dda9bd7
        type: ios
        device: ""
      properties:
        type:
          description: An identifier for the channel from which a message originated.
            May include one of api, sdk, messenger, or any number of other channels.
          example: ios
          type: string
        integrationId:
          description: Identifier indicating which integration the message was sent
            from. For user messages only.
          example: de13bee15b51033b34162411
          nullable: true
          type: string
        originalMessageId:
          description: Message identifier assigned by the originating channel.
          example: 5f40256af057d0000dda9bd7
          nullable: true
          type: string
        originalMessageTimestamp:
          description: A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`
            representing when the third party channel received the message.
          example: 2019-03-21T18:45:53.720Z
          nullable: true
          type: string
        client:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The client from which the user authored the message or activity,
            if applicable. This field is not applicable in API responses, it is used
            only in webhook payloads if the `includeFullSource` option is enabled.
          nullable: true
        device:
          allOf:
          - $ref: '#/components/schemas/device'
          description: The device from which the user authored the message or activity,
            if applicable. This field is not applicable in API responses, it is used
            only in webhook payloads if the `includeFullSource` option is enabled.
          nullable: true
      required:
      - type
      type: object
    message:
      example:
        metadata: ""
        deleted: true
        author:
          avatarUrl: ""
          displayName: Steve
          userExternalId: your-own-id
          type: business
          userId: 5963c0d619a30a2e00de36b8
          subtypes:
          - AI
          - AI
        received: 2019-03-21T18:48:52.760Z
        id: 5e552ef595e5206375bb835d
        source:
          originalMessageTimestamp: 2019-03-21T18:45:53.720Z
          integrationId: de13bee15b51033b34162411
          client: ""
          originalMessageId: 5f40256af057d0000dda9bd7
          type: ios
          device: ""
        content: ""
        quotedMessage: ""
      properties:
        id:
          description: The unique ID of the message.
          example: 5e552ef595e5206375bb835d
          type: string
        received:
          description: A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`
            representing when Sunshine Conversations received the message.
          example: 2019-03-21T18:48:52.760Z
          type: string
        author:
          $ref: '#/components/schemas/author'
        content:
          allOf:
          - $ref: '#/components/schemas/content'
          description: The content of the message.
        source:
          $ref: '#/components/schemas/source'
        quotedMessage:
          allOf:
          - $ref: '#/components/schemas/quotedMessage'
          description: The quoted message is currently only available for WhatsApp
            and Web Messenger `formResponse` messages.
          nullable: true
        metadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          nullable: true
        deleted:
          description: true if the message serves as a placeholder for one that has
            been deleted.
          nullable: true
          type: boolean
      type: object
    quotedMessageMessage:
      properties:
        type:
          default: message
          description: The type of quotedMessage - a complete Sunshine Conversations
            message is provided.
          type: string
        message:
          allOf:
          - $ref: '#/components/schemas/message'
      required:
      - type
      title: QuotedMessageMessage
      type: object
    quotedMessageExternalMessageId:
      properties:
        type:
          default: externalMessageId
          description: The type of quotedMessage - `externalMessageId` if no Sunshine
            Conversations message matched the quoted message.
          type: string
        externalMessageId:
          description: The external message Id of the quoted message.
          type: string
      required:
      - type
      title: QuotedMessageExternalMessageId
      type: object
    quotedMessage:
      discriminator:
        mapping:
          message: '#/components/schemas/quotedMessageMessage'
          externalMessageId: '#/components/schemas/quotedMessageExternalMessageId'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/quotedMessageMessage'
      - $ref: '#/components/schemas/quotedMessageExternalMessageId'
      x-one-of-name: QuotedMessage
    messageListResponse:
      example:
        meta:
          beforeCursor: 55c8d9758590aa1900b9b9f6
          afterCursor: 55c8d9758590aa1900b9b9f6
          hasMore: true
        messages:
        - metadata: ""
          deleted: true
          author:
            avatarUrl: ""
            displayName: Steve
            userExternalId: your-own-id
            type: business
            userId: 5963c0d619a30a2e00de36b8
            subtypes:
            - AI
            - AI
          received: 2019-03-21T18:48:52.760Z
          id: 5e552ef595e5206375bb835d
          source:
            originalMessageTimestamp: 2019-03-21T18:45:53.720Z
            integrationId: de13bee15b51033b34162411
            client: ""
            originalMessageId: 5f40256af057d0000dda9bd7
            type: ios
            device: ""
          content: ""
          quotedMessage: ""
        - metadata: ""
          deleted: true
          author:
            avatarUrl: ""
            displayName: Steve
            userExternalId: your-own-id
            type: business
            userId: 5963c0d619a30a2e00de36b8
            subtypes:
            - AI
            - AI
          received: 2019-03-21T18:48:52.760Z
          id: 5e552ef595e5206375bb835d
          source:
            originalMessageTimestamp: 2019-03-21T18:45:53.720Z
            integrationId: de13bee15b51033b34162411
            client: ""
            originalMessageId: 5f40256af057d0000dda9bd7
            type: ios
            device: ""
          content: ""
          quotedMessage: ""
        links:
          next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
      properties:
        messages:
          description: List of returned messages.
          items:
            $ref: '#/components/schemas/message'
          type: array
        meta:
          $ref: '#/components/schemas/meta'
        links:
          $ref: '#/components/schemas/links'
      title: MessageListResponse
      type: object
    destination:
      description: |
        The destination of the message, in the case of [channel targeting](https://docs.smooch.io/guide/sending-messages/#targeting-a-specific-channel) or sending [silent messages](https://docs.smooch.io/guide/sending-messages/#silent-messages). Only
        applicable if the author role is `business` and the conversation is of type
        `personal`.
      oneOf:
      - $ref: '#/components/schemas/integrationId'
      - $ref: '#/components/schemas/integrationType'
      x-one-of-name: Destination
    messageOverridePayload:
      description: The exact payload to send to the channel.
      properties:
        payload:
          type: object
      type: object
    messageOverride:
      anyOf:
      - $ref: '#/components/schemas/MessageOverrideApple'
      - $ref: '#/components/schemas/MessageOverrideLine'
      - $ref: '#/components/schemas/MessageOverrideMessenger'
      - $ref: '#/components/schemas/MessageOverrideWhatsapp'
      description: A raw payload containing a message that is sent directly to a channel.
        Messages for [Apple Messages for Business](https://docs.smooch.io/guide/apple-business-chat/#passthrough-api),
        [Line](https://docs.smooch.io/guide/line/#passthrough-api), [Messenger](https://docs.smooch.io/guide/facebook-messenger/#passthrough-api),
        [Whatsapp](https://docs.smooch.io/guide/whatsapp/#passthrough-api) channels
        are supported.
    messagePost:
      properties:
        author:
          allOf:
          - $ref: '#/components/schemas/author'
          description: The author of the message.
        content:
          allOf:
          - $ref: '#/components/schemas/content'
          description: The content of the message.
        destination:
          $ref: '#/components/schemas/destination'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
        override:
          $ref: '#/components/schemas/messageOverride'
        schema:
          description: |
            When `schema` is set to `"whatsapp"`, the `content` key is expected to conform to the [native WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates) for sending message templates.
            For more details, consult the documentation for [sending message templates on WhatsApp](https://docs.smooch.io/guide/whatsapp/#sending-message-templates).
          example: whatsapp
          type: string
      required:
      - author
      - content
      type: object
    messagePostResponse:
      description: The created messages. A single request may produce multiple messages
        when the shorthand syntax is used to send a template message with leading
        text.
      example:
        messages:
        - metadata: ""
          deleted: true
          author:
            avatarUrl: ""
            displayName: Steve
            userExternalId: your-own-id
            type: business
            userId: 5963c0d619a30a2e00de36b8
            subtypes:
            - AI
            - AI
          received: 2019-03-21T18:48:52.760Z
          id: 5e552ef595e5206375bb835d
          source:
            originalMessageTimestamp: 2019-03-21T18:45:53.720Z
            integrationId: de13bee15b51033b34162411
            client: ""
            originalMessageId: 5f40256af057d0000dda9bd7
            type: ios
            device: ""
          content: ""
          quotedMessage: ""
        - metadata: ""
          deleted: true
          author:
            avatarUrl: ""
            displayName: Steve
            userExternalId: your-own-id
            type: business
            userId: 5963c0d619a30a2e00de36b8
            subtypes:
            - AI
            - AI
          received: 2019-03-21T18:48:52.760Z
          id: 5e552ef595e5206375bb835d
          source:
            originalMessageTimestamp: 2019-03-21T18:45:53.720Z
            integrationId: de13bee15b51033b34162411
            client: ""
            originalMessageId: 5f40256af057d0000dda9bd7
            type: ios
            device: ""
          content: ""
          quotedMessage: ""
      properties:
        messages:
          items:
            $ref: '#/components/schemas/message'
          type: array
      type: object
    activityTypes:
      properties:
        type:
          description: If the author type is `user`, only `conversation:read` is supported.
          enum:
          - conversation:read
          - typing:start
          - typing:stop
          type: string
      type: object
    activityPost:
      allOf:
      - $ref: '#/components/schemas/activityPost_allOf'
      - $ref: '#/components/schemas/activityTypes'
      required:
      - author
      - type
    acceptControlBody:
      properties:
        metadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          description: Flat object containing custom properties. Strings, numbers
            and booleans are the only supported format that can be passed to metadata.
            The metadata is limited to 4KB in size. The metadata object will be included
            in the `switchboard:acceptControl` and `switchboard:acceptControl:failure`
            webhooks.
      type: object
    offerControlBody:
      properties:
        switchboardIntegration:
          description: The id or the name of the switchboard integration that will
            become pending. Also supports the `next` keyword to offer control to the
            next switchboard integration designated in the switchboard hierarchy configuration.
            This cannot match the active switchboard integration.
          example: next
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          description: Flat object containing custom properties. Strings, numbers
            and booleans are the only supported format that can be passed to metadata.
            The metadata is limited to 4KB in size. The metadata object will be included
            in the `switchboard:offerControl` and `switchboard:offerControl:failure`
            webhooks.
      required:
      - switchboardIntegration
      type: object
    passControlBody:
      properties:
        switchboardIntegration:
          description: The id or the name of the switchboard integration that will
            become active. May also use the `next` keyword to transfer control to
            the next switchboard integration designated in the switchboard hierarchy
            configuration
          example: next
          type: string
        metadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          description: Flat object containing custom properties. Strings, numbers
            and booleans are the only supported format that can be passed to metadata.
            The metadata is limited to 4KB in size. The metadata object will be included
            in the `switchboard:passControl` webhook.
      required:
      - switchboardIntegration
      type: object
    integration:
      description: The integration.
      discriminator:
        mapping:
          android: '#/components/schemas/android'
          apple: '#/components/schemas/apple'
          custom: '#/components/schemas/custom'
          instagram: '#/components/schemas/instagram'
          ios: '#/components/schemas/ios'
          line: '#/components/schemas/line'
          mailgun: '#/components/schemas/mailgun'
          messagebird: '#/components/schemas/messagebird'
          messenger: '#/components/schemas/messenger'
          telegram: '#/components/schemas/telegram'
          twilio: '#/components/schemas/twilio'
          twitter: '#/components/schemas/twitter'
          unity: '#/components/schemas/unity'
          viber: '#/components/schemas/viber'
          web: '#/components/schemas/web'
          whatsapp: '#/components/schemas/whatsapp'
        propertyName: type
      example:
        displayName: Channel name
        id: 5e4af71a81966cfff3ef6550
        type: android
      properties:
        id:
          description: The unique ID of the integration.
          example: 5e4af71a81966cfff3ef6550
          readOnly: true
          type: string
        type:
          example: android
          type: string
        status:
          $ref: '#/components/schemas/status'
        displayName:
          description: A human-friendly name used to identify the integration.
          example: Channel name
          maxLength: 100
          nullable: true
          type: string
      required:
      - type
      type: object
    defaultResponderId:
      properties:
        defaultResponderId:
          description: |
            The default responder ID for the integration. This is the ID of the responder that will be used to send messages to the user.
            For more information, refer to <a href="https://docs.smooch.io/guide/switchboard/#per-channel-default-responder">Per-channel default responder</a> guide.
          nullable: true
          type: string
      title: Default Responder ID
      type: object
    defaultResponder:
      properties:
        defaultResponder:
          $ref: '#/components/schemas/defaultResponder_defaultResponder'
      title: Default Responder
      type: object
    android:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/android_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    apple:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/apple_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    target:
      description: URL to be called when the webhook is triggered.
      example: https://example.com/callback
      type: string
    triggers:
      description: An array of triggers the integration is subscribed to. This property
        is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
      example:
      - conversation:read
      - conversation:message
      items:
        type: string
      type: array
    includeFullUser:
      default: false
      description: A boolean specifying whether webhook payloads should include the
        complete user schema for events involving a specific user.
      type: boolean
    includeFullSource:
      default: false
      description: A boolean specifying whether webhook payloads should include the
        client and device object (when applicable).
      type: boolean
    webhook:
      example:
        includeFullSource: false
        id: 5e554d2cac66fb73a3c01871
        secret: 8564b3e6a8b20a4bdb68b05ce9bc5936
        triggers:
        - conversation:read
        - conversation:message
        version: v2
        includeFullUser: false
        target: https://example.com/callback
      properties:
        id:
          description: A unique identifier for the webhook.
          example: 5e554d2cac66fb73a3c01871
          readOnly: true
          type: string
        version:
          description: Schema version of the payload delivered to this webhook. Can
            be `v1`, `v1.1` or `v2`.
          example: v2
          readOnly: true
          type: string
        target:
          description: URL to be called when the webhook is triggered.
          example: https://example.com/callback
          type: string
        triggers:
          description: An array of triggers the integration is subscribed to. This
            property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
          example:
          - conversation:read
          - conversation:message
          items:
            type: string
          type: array
        secret:
          description: Webhook secret, used to verify the origin of incoming requests.
          example: 8564b3e6a8b20a4bdb68b05ce9bc5936
          type: string
        includeFullUser:
          default: false
          description: A boolean specifying whether webhook payloads should include
            the complete user schema for events involving a specific user.
          type: boolean
        includeFullSource:
          default: false
          description: A boolean specifying whether webhook payloads should include
            the client and device object (when applicable).
          type: boolean
      required:
      - target
      - triggers
      type: object
    custom:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/custom_allOf'
    instagram:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/instagram_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    ios:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/ios_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    line:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/line_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    mailgun:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/mailgun_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    messagebird:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/messagebird_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    messenger:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/messenger_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    telegram:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/telegram_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    twilio:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/twilio_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    twitter:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/twitter_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    unity:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/unity_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    viber:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/viber_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    prechatCapture:
      properties:
        avatarUrl:
          default: undefined
          description: Sets the URL of the avatar to use for the automatic reply to
            the prechat capture messages.
          example: https://domain.com/images/avatar.png
          type: string
        enabled:
          default: false
          description: If true, enables the Prechat Capture add-on when the Web Messenger
            is initialized.
          type: boolean
        enableEmailLinking:
          default: false
          description: f true and Mailgun is integrated, will automatically link submitted
            emails.
          type: boolean
        fields:
          description: Array of Fields. Overrides the default Prechat Capture fields
            to define a custom form.
          example:
          - type: email
            name: email
            label: Email
            placeholder: your@email.com
          - type: text
            name: company-website
            label: Company website
            placeholder: mycompany.com
          items:
            $ref: '#/components/schemas/field'
          type: array
      type: object
    web:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/web_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    whatsapp:
      allOf:
      - $ref: '#/components/schemas/integration'
      - $ref: '#/components/schemas/whatsapp_allOf'
      - $ref: '#/components/schemas/defaultResponderId'
      - $ref: '#/components/schemas/defaultResponder'
    status:
      description: The status of the integration.
      enum:
      - inactive
      - active
      - error
      readOnly: true
      type: string
    integrationListResponse:
      example:
        meta:
          beforeCursor: 55c8d9758590aa1900b9b9f6
          afterCursor: 55c8d9758590aa1900b9b9f6
          hasMore: true
        links:
          next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
        integrations:
        - displayName: Channel name
          id: 5e4af71a81966cfff3ef6550
          type: android
        - displayName: Channel name
          id: 5e4af71a81966cfff3ef6550
          type: android
      properties:
        integrations:
          description: List of returned integrations.
          items:
            $ref: '#/components/schemas/integration'
          type: array
        meta:
          $ref: '#/components/schemas/meta'
        links:
          $ref: '#/components/schemas/links'
      type: object
    integrationResponse:
      properties:
        integration:
          $ref: '#/components/schemas/integration'
      title: integrationResponse
      type: object
    integrationUpdateBase:
      properties:
        displayName:
          description: A human-friendly name used to identify the integration. `displayName`
            can be unset by changing it to `null`.
          example: My awesome integration
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
        defaultResponderId:
          description: |
            The default responder ID for the integration. This is the ID of the responder that will be used to send messages to the user.
            For more information, refer to <a href="https://docs.smooch.io/guide/switchboard/#per-channel-default-responder">Per-channel default responder</a> guide.
          nullable: true
          type: string
      type: object
    androidUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/androidUpdate_allOf'
    appleUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    customUpdate:
      allOf:
      - $ref: '#/components/schemas/customUpdate_allOf'
    instagramUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/instagramUpdate_allOf'
    iosUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/iosUpdate_allOf'
    lineUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    mailgunUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/mailgunUpdate_allOf'
    messageBirdUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    messengerUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/instagramUpdate_allOf'
    telegramUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    twilioUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    twitterUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    unityUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/unityUpdate_allOf'
    viberUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
    webUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/webUpdate_allOf'
    whatsAppUpdate:
      allOf:
      - $ref: '#/components/schemas/integrationUpdateBase'
      - $ref: '#/components/schemas/whatsAppUpdate_allOf'
    integrationUpdate:
      oneOf:
      - $ref: '#/components/schemas/androidUpdate'
      - $ref: '#/components/schemas/appleUpdate'
      - $ref: '#/components/schemas/customUpdate'
      - $ref: '#/components/schemas/instagramUpdate'
      - $ref: '#/components/schemas/iosUpdate'
      - $ref: '#/components/schemas/lineUpdate'
      - $ref: '#/components/schemas/mailgunUpdate'
      - $ref: '#/components/schemas/messageBirdUpdate'
      - $ref: '#/components/schemas/messengerUpdate'
      - $ref: '#/components/schemas/telegramUpdate'
      - $ref: '#/components/schemas/twilioUpdate'
      - $ref: '#/components/schemas/twitterUpdate'
      - $ref: '#/components/schemas/unityUpdate'
      - $ref: '#/components/schemas/viberUpdate'
      - $ref: '#/components/schemas/webUpdate'
      - $ref: '#/components/schemas/whatsAppUpdate'
      x-one-of-name: IntegrationUpdate
    apiKey:
      description: The integration key.
      example:
        displayName: My custom key
        id: int_5e4b0f225aca01092928f917
        secret: Ck1LjzzlUzvlCTtqAdQ2z1QukuBTrN3TIx
      properties:
        id:
          description: The unique ID of the API key, used when signing JWTs or accessing
            the API using Basic Authentication.
          example: int_5e4b0f225aca01092928f917
          type: string
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The name of the API key.
          example: My custom key
        secret:
          description: The secret of the API key, used when signing JWTs or accessing
            the API using Basic Authentication
          example: Ck1LjzzlUzvlCTtqAdQ2z1QukuBTrN3TIx
          type: string
      type: object
    integrationApiKeyResponse:
      example:
        key:
          displayName: My custom key
          id: int_5e4b0f225aca01092928f917
          secret: Ck1LjzzlUzvlCTtqAdQ2z1QukuBTrN3TIx
      properties:
        key:
          $ref: '#/components/schemas/apiKey'
      type: object
    webhookListResponse:
      example:
        webhooks:
        - includeFullSource: false
          id: 5e554d2cac66fb73a3c01871
          secret: 8564b3e6a8b20a4bdb68b05ce9bc5936
          triggers:
          - conversation:read
          - conversation:message
          version: v2
          includeFullUser: false
          target: https://example.com/callback
        - includeFullSource: false
          id: 5e554d2cac66fb73a3c01871
          secret: 8564b3e6a8b20a4bdb68b05ce9bc5936
          triggers:
          - conversation:read
          - conversation:message
          version: v2
          includeFullUser: false
          target: https://example.com/callback
      properties:
        webhooks:
          description: List of webhooks associated with the integration.
          items:
            $ref: '#/components/schemas/webhook'
          type: array
      type: object
    webhookBody:
      properties:
        target:
          description: URL to be called when the webhook is triggered.
          example: https://example.com/callback
          type: string
        triggers:
          description: An array of triggers the integration is subscribed to. This
            property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
          example:
          - conversation:read
          - conversation:message
          items:
            type: string
          type: array
        includeFullUser:
          default: false
          description: A boolean specifying whether webhook payloads should include
            the complete user schema for events involving a specific user.
          type: boolean
        includeFullSource:
          default: false
          description: A boolean specifying whether webhook payloads should include
            the client and device object (when applicable).
          type: boolean
      type: object
    webhookCreateBody:
      allOf:
      - $ref: '#/components/schemas/webhookBody'
      required:
      - target
      - triggers
    webhookResponse:
      example:
        webhook: ""
      properties:
        webhook:
          allOf:
          - $ref: '#/components/schemas/webhook'
          description: The webhook.
      title: WebhookResponse
      type: object
    enabled:
      description: Whether the switchboard is enabled. Allows creating the switchboard
        in a disabled state so that messages don't get lost or misrouted during switchboard
        configuration. When a switchboard is disabled, integrations linked to the
        switchboard will receive all events.
      type: boolean
    defaultSwitchboardIntegrationId:
      description: The id of the switchboard integration that will be given control
        when a new conversation begins. It will also be used for conversations that
        existed before the switchboard was enabled.
      example: 5ef21b132f21af34f088530e
      type: string
    switchboard:
      example:
        defaultSwitchboardIntegrationId: 5ef21b132f21af34f088530e
        id: 5ef21b132f21af34f088530d
        enabled: true
      properties:
        id:
          description: The unique ID of the switchboard.
          example: 5ef21b132f21af34f088530d
          type: string
        enabled:
          description: Whether the switchboard is enabled. Allows creating the switchboard
            in a disabled state so that messages don't get lost or misrouted during
            switchboard configuration. When a switchboard is disabled, integrations
            linked to the switchboard will receive all events.
          type: boolean
        defaultSwitchboardIntegrationId:
          description: The id of the switchboard integration that will be given control
            when a new conversation begins. It will also be used for conversations
            that existed before the switchboard was enabled.
          example: 5ef21b132f21af34f088530e
          type: string
      required:
      - enabled
      - id
      type: object
    switchboardListResponse:
      example:
        switchboards:
        - defaultSwitchboardIntegrationId: 5ef21b132f21af34f088530e
          id: 5ef21b132f21af34f088530d
          enabled: true
        - defaultSwitchboardIntegrationId: 5ef21b132f21af34f088530e
          id: 5ef21b132f21af34f088530d
          enabled: true
      properties:
        switchboards:
          description: List of returned switchboards.
          items:
            $ref: '#/components/schemas/switchboard'
          type: array
      type: object
    switchboardResponse:
      example:
        switchboard: ""
      properties:
        switchboard:
          allOf:
          - $ref: '#/components/schemas/switchboard'
          description: The switchboard.
      title: SwitchboardResponse
      type: object
    switchboardUpdateBody:
      properties:
        enabled:
          description: Whether the switchboard is enabled. Allows creating the switchboard
            in a disabled state so that messages don't get lost or misrouted during
            switchboard configuration. When a switchboard is disabled, integrations
            linked to the switchboard will receive all events.
          type: boolean
        defaultSwitchboardIntegrationId:
          description: The id of the switchboard integration that will be given control
            when a new conversation begins. It will also be used for conversations
            that existed before the switchboard was enabled.
          example: 5ef21b132f21af34f088530e
          type: string
      type: object
    deliverStandbyEvents:
      description: Setting to determine if webhooks should be sent when the switchboard
        integration is not in control of a conversation (standby status)
      type: boolean
    nextSwitchboardIntegrationId:
      description: The switchboard integration id to which control of a conversation
        is passed / offered by default.
      example: 5ef21b86e933b7355c11c606
      type: string
    messageHistoryCount:
      description: Number of messages to include in the message history context.
      example: 5
      maximum: 10
      minimum: 1
      nullable: true
      type: integer
    switchboardIntegration:
      example:
        integrationType: zd:agentWorkspace
        deliverStandbyEvents: true
        nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606
        name: bot
        integrationId: 5ef21b86e933b7355c11c605
        messageHistoryCount: 5
        id: 5ef21b86e933b7355c11c604
      properties:
        id:
          description: The unique ID of the switchboard integration.
          example: 5ef21b86e933b7355c11c604
          type: string
        name:
          description: Identifier for use in control transfer protocols. Restricted
            to alphanumeric characters, `-` and `_`.
          example: bot
          maxLength: 128
          type: string
        integrationId:
          description: Id of the integration that should deliver events routed by
            the switchboard.
          example: 5ef21b86e933b7355c11c605
          type: string
        integrationType:
          description: Type of integration that should deliver events routed by the
            switchboard. If referencing an OAuth integration, the clientId issued
            by Sunshine Conversations during the OAuth partnership process will be
            the value of integrationType.
          example: zd:agentWorkspace
          type: string
        deliverStandbyEvents:
          description: Setting to determine if webhooks should be sent when the switchboard
            integration is not in control of a conversation (standby status)
          type: boolean
        nextSwitchboardIntegrationId:
          description: The switchboard integration id to which control of a conversation
            is passed / offered by default.
          example: 5ef21b86e933b7355c11c606
          type: string
        messageHistoryCount:
          description: Number of messages to include in the message history context.
          example: 5
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
      required:
      - deliverStandbyEvents
      - id
      - integrationId
      - integrationType
      - name
      type: object
    switchboardIntegrationListResponse:
      example:
        switchboardIntegrations:
        - integrationType: zd:agentWorkspace
          deliverStandbyEvents: true
          nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606
          name: bot
          integrationId: 5ef21b86e933b7355c11c605
          messageHistoryCount: 5
          id: 5ef21b86e933b7355c11c604
        - integrationType: zd:agentWorkspace
          deliverStandbyEvents: true
          nextSwitchboardIntegrationId: 5ef21b86e933b7355c11c606
          name: bot
          integrationId: 5ef21b86e933b7355c11c605
          messageHistoryCount: 5
          id: 5ef21b86e933b7355c11c604
      properties:
        switchboardIntegrations:
          description: List of returned switchboard integrations.
          items:
            $ref: '#/components/schemas/switchboardIntegration'
          type: array
      type: object
    switchboardIntegrationCreateBody:
      properties:
        name:
          description: Identifier for use in control transfer protocols. Restricted
            to alphanumeric characters, `-` and `_`.
          example: bot
          maxLength: 128
          type: string
        integrationId:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegrationId'
          description: The id of the integration to link to the switchboard integration.
            Must be used when linking a custom integration. One of `integrationId`
            or `integrationType` must be provided.
        integrationType:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegrationType'
          description: The type of the integration to link to the switchboard integration.
            Must be used when linking an OAuth integration. One of `integrationId`
            or `integrationType` must be provided.
        deliverStandbyEvents:
          allOf:
          - $ref: '#/components/schemas/deliverStandbyEvents'
        nextSwitchboardIntegrationId:
          allOf:
          - $ref: '#/components/schemas/nextSwitchboardIntegrationId'
          nullable: true
        messageHistoryCount:
          description: Number of messages to include in the message history context.
          example: 5
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
      required:
      - name
      type: object
    switchboardIntegrationResponse:
      example:
        switchboardIntegration: ""
      properties:
        switchboardIntegration:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegration'
          description: The switchboard integration.
      title: SwitchboardIntegrationResponse
      type: object
    switchboardIntegrationUpdateBody:
      properties:
        name:
          description: Identifier for use in control transfer protocols. Restricted
            to alphanumeric characters, `-` and `_`.
          example: bot
          maxLength: 128
          type: string
        integrationId:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegrationId'
          description: The id of the integration to link to the switchboard integration.
            Must be used when linking a custom integration. Can't provide both `integrationId`
            and `integrationType`.
        integrationType:
          allOf:
          - $ref: '#/components/schemas/switchboardIntegrationType'
          description: The type of the integration to link to the switchboard integration.
            Must be used when linking an OAuth integration. Can't provide both `integrationId`
            and `integrationType`.
        deliverStandbyEvents:
          description: Setting to determine if webhooks should be sent when the switchboard
            integration is not in control of a conversation (standby status)
          type: boolean
        nextSwitchboardIntegrationId:
          allOf:
          - $ref: '#/components/schemas/nextSwitchboardIntegrationId'
          nullable: true
        messageHistoryCount:
          description: Number of messages to include in the message history context.
          example: 5
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
      type: object
    signedUpAt:
      description: The date at which the user signed up. Must be ISO 8601 time format
        `YYYY-MM-DDThh:mm:ss.sssZ`.
      example: 2020-05-21T15:53:30.197Z
      type: string
    profile:
      description: Object hosting user profile information.
      properties:
        givenName:
          description: The user's given name (first name).
          example: Jane
          maxLength: 128
          minLength: 1
          nullable: true
          type: string
        surname:
          description: The user's surname (last name).
          example: Doe
          maxLength: 128
          minLength: 1
          nullable: true
          type: string
        email:
          description: The user's email address.
          example: jane.doe@gmail.com
          format: email
          maxLength: 128
          minLength: 1
          nullable: true
          type: string
        avatarUrl:
          description: The user's avatar.
          example: https://s3.amazonaws.com/avatar.jpg
          format: uri
          maxLength: 2048
          minLength: 1
          nullable: true
          type: string
        locale:
          description: End-user's locale information in BCP 47 format.
          example: fr-CA
          maxLength: 64
          minLength: 1
          nullable: true
          type: string
      type: object
    userCreateBody:
      properties:
        externalId:
          description: |
            A unique identifier for the user. The `externalId` can be used to link a user to the same conversation [across multiple devices](https://docs.smooch.io/guide/authenticating-users/).
          example: your-own-id
          maxLength: 1024
          minLength: 1
          type: string
        signedUpAt:
          description: The date at which the user signed up. Must be ISO 8601 time
            format `YYYY-MM-DDThh:mm:ss.sssZ`.
          example: 2020-05-21T15:53:30.197Z
          type: string
        profile:
          $ref: '#/components/schemas/profile'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      required:
      - externalId
      title: UserCreateBody
      type: object
    userTruncated:
      properties:
        id:
          description: The unique ID of the user.
          example: 7494535bff5cef41a15be74d
          type: string
        externalId:
          description: |
            An optional ID that can also be used to retrieve the user.
          example: your-own-id
          nullable: true
          type: string
      type: object
    identity:
      description: A connected user identity, such as an email.
      properties:
        type:
          description: The type of identity.
          example: email
          type: string
        value:
          description: The identity value.
          example: jane.doe@gmail.com
          maxLength: 128
          minLength: 1
          type: string
        verification:
          description: The type of verification performed on the identity.
          example: embed
          type: string
      type: object
    user:
      allOf:
      - $ref: '#/components/schemas/userTruncated'
      - $ref: '#/components/schemas/user_allOf'
    userResponse:
      example:
        user: ""
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user.
      title: UserResponse
      type: object
    userUpdateBody:
      properties:
        signedUpAt:
          allOf:
          - $ref: '#/components/schemas/signedUpAt'
        profile:
          allOf:
          - $ref: '#/components/schemas/profile'
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      title: UserUpdateBody
      type: object
    clientListResponse:
      example:
        clients:
        - lastSeen: 2020-08-20T16:13:07.462Z
          avatarUrl: https://openapi-generator.tech
          displayName: Steve
          integrationId: 582dedf230e788746891281a
          externalId: your-own-id
          linkedAt: 2020-06-23T14:33:47.492Z
          raw: '{}'
          id: 5c9a34160c89726709136733
          type: telegram
          status: active
          info: '{}'
        - lastSeen: 2020-08-20T16:13:07.462Z
          avatarUrl: https://openapi-generator.tech
          displayName: Steve
          integrationId: 582dedf230e788746891281a
          externalId: your-own-id
          linkedAt: 2020-06-23T14:33:47.492Z
          raw: '{}'
          id: 5c9a34160c89726709136733
          type: telegram
          status: active
          info: '{}'
        meta:
          beforeCursor: 55c8d9758590aa1900b9b9f6
          afterCursor: 55c8d9758590aa1900b9b9f6
          hasMore: true
        links:
          next: https://api.smooch.io/v2/apps?page[after]=5ea868f862cdd24abf010b38
          prev: https://api.smooch.io/v2/apps?page[before]=fcafad804c39a39648004af9
      properties:
        clients:
          description: List of returned clients.
          items:
            $ref: '#/components/schemas/client'
          type: array
        meta:
          $ref: '#/components/schemas/meta'
        links:
          $ref: '#/components/schemas/links'
      type: object
    matchCriteriaMailgun:
      allOf:
      - $ref: '#/components/schemas/matchCriteriaBase'
      - $ref: '#/components/schemas/matchCriteriaMailgun_allOf'
    matchCriteriaMessagebird:
      allOf:
      - $ref: '#/components/schemas/matchCriteriaBase'
      - $ref: '#/components/schemas/matchCriteriaMessagebird_allOf'
    matchCriteriaTwilio:
      allOf:
      - $ref: '#/components/schemas/matchCriteriaBase'
      - $ref: '#/components/schemas/matchCriteriaTwilio_allOf'
    matchCriteriaWhatsapp:
      allOf:
      - $ref: '#/components/schemas/matchCriteriaBase'
      - $ref: '#/components/schemas/matchCriteriaWhatsapp_allOf'
    matchCriteriaBase:
      description: The set of criteria used to determine the user's identity on a
        third-party channel.
      properties:
        type:
          description: The channel type.
          type: string
        integrationId:
          description: The ID of the integration to link. Must match the provided
            type.
          example: 582dedf230e788746891281a
          type: string
        primary:
          default: true
          description: Flag indicating whether the client will become the primary
            for the target conversation once linking is complete.
          type: boolean
      required:
      - integrationId
      - type
      type: object
    matchCriteria:
      description: The set of criteria used to determine the user's identity on a
        third-party channel.
      discriminator:
        mapping:
          mailgun: '#/components/schemas/matchCriteriaMailgun'
          messagebird: '#/components/schemas/matchCriteriaMessagebird'
          twilio: '#/components/schemas/matchCriteriaTwilio'
          whatsapp: '#/components/schemas/matchCriteriaWhatsapp'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/matchCriteriaMailgun'
      - $ref: '#/components/schemas/matchCriteriaMessagebird'
      - $ref: '#/components/schemas/matchCriteriaTwilio'
      - $ref: '#/components/schemas/matchCriteriaWhatsapp'
      x-one-of-name: MatchCriteria
    clientCreate:
      properties:
        matchCriteria:
          $ref: '#/components/schemas/matchCriteria'
        confirmation:
          $ref: '#/components/schemas/Confirmation'
        target:
          $ref: '#/components/schemas/Target'
      required:
      - confirmation
      - matchCriteria
      - target
      type: object
    deviceResponse:
      example:
        device: ""
      properties:
        device:
          allOf:
          - $ref: '#/components/schemas/device'
          description: The device.
      title: deviceResponse
      type: object
    appSubSchema:
      description: The app that triggered the events.
      properties:
        id:
          description: The unique ID of the app.
          example: 5e4af71a81966cfff3ef6550
          type: string
      type: object
    webhookSubSchema:
      description: The webhook that generated the payload.
      example:
        id: 582dedf230e788746891281a
        version: v2
      properties:
        id:
          description: The unique ID of the webhook.
          type: string
        version:
          description: Schema version of the payload delivered to this webhook (v2).
          type: string
      type: object
    eventSubSchema:
      example:
        id: 0ca7d56ba7b2e081e479fe9e
        type: conversation:message
        createdAt: 2020-02-25T18:06:37.547Z
      properties:
        id:
          description: The unique ID of the event. May be used to ensure that an event
            is not processed twice in the case of a webhook that is re-tried due to
            an error or timeout.
          type: string
        type:
          description: The type of the event. Will match one of the subscribed triggers
            for your [webhook](#operation/createWebhook).
          type: string
        createdAt:
          description: A timestamp signifying when the event was generated. Formatted
            as `YYYY-MM-DDThh:mm:ss.SSSZ`.
          type: string
      type: object
    sourceWebhook:
      properties:
        type:
          description: An identifier for the channel from which a message originated.
            May include one of api, sdk, messenger, or any number of other channels.
          example: ios
          type: string
        integrationId:
          description: Identifier indicating which integration the message was sent
            from. For user messages only.
          type: string
        originalMessageId:
          description: Message identifier assigned by the originating channel.
          nullable: true
          type: string
        originalMessageTimestamp:
          description: A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ
            representing when the third-party channel received the message.
          nullable: true
          type: string
        client:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The client from which the user authored the message or activity,
            if applicable. This field will only be present if the `includeFullSource`
            option is enabled for the webhook.
          nullable: true
        device:
          allOf:
          - $ref: '#/components/schemas/device'
          description: The device from which the user authored the message or activity,
            if applicable. This field will only be present if the `includeFullSource`
            option is enabled for the webhook
          nullable: true
      type: object
    clientAddEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/clientAddEvent_allOf'
      title: client:add
    clientRemoveEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/clientRemoveEvent_allOf'
      title: client:remove
    clientUpdateEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/clientUpdateEvent_allOf'
      title: client:update
    campaign:
      description: The campaign the user interacted with (if applicable).
      nullable: true
      properties:
        id:
          description: The unique ID of the campaign.
          example: de13bee15b51033b34162411
          type: string
      type: object
    sourceWithCampaignWebhook:
      allOf:
      - $ref: '#/components/schemas/sourceWebhook'
      - $ref: '#/components/schemas/sourceWithCampaignWebhook_allOf'
    referral:
      description: |
        Data representing a referral object when a user is referred to a conversation. See the <a href="https://docs.smooch.io/guide/conversation-referrals/">conversation referrals</a> guide for more details.
      properties:
        code:
          description: The referral’s identifier.
          type: string
        details:
          $ref: '#/components/schemas/referral_details'
      type: object
    conversationCreateEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationCreateEvent_allOf'
      title: conversation:create
    conversationJoinEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationJoinEvent_allOf'
      title: conversation:join
    conversationLeaveEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationLeaveEvent_allOf'
      title: conversation:leave
    conversationRemoveEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationRemoveEvent_allOf'
      title: conversation:remove
    conversationMessageDeliveryPayload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user associated with the conversation.
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation in which the message was sent.
        message:
          $ref: '#/components/schemas/conversationMessageDeliveryPayload_message'
        destination:
          $ref: '#/components/schemas/conversationMessageDeliveryPayload_destination'
        externalMessages:
          description: An array of objects representing the third-party messages associated
            with the event. The order of the external messages is not guaranteed to
            be the same across the different triggers. Note that some channels don’t
            expose message IDs, in which case this field will be unset.
          items:
            $ref: '#/components/schemas/conversationMessageDeliveryPayload_externalMessages'
          nullable: true
          type: array
        isFinalEvent:
          description: A boolean indicating whether the webhook is the final one for
            the `message.id` and `destination.type` pair.
          type: boolean
      type: object
    conversationMessageDeliveryChannelEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationMessageDeliveryChannelEvent_allOf'
      title: conversation:message:delivery:channel
    conversationMessageDeliveryFailureEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationMessageDeliveryFailureEvent_allOf'
      title: conversation:message:delivery:failure
    conversationMessageDeliveryUserEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationMessageDeliveryChannelEvent_allOf'
      title: conversation:message:delivery:user
    authorWebhook:
      description: The author of the activity.
      properties:
        type:
          description: The `type` of the author.
          enum:
          - business
          - user
          type: string
        userId:
          description: The id of the user. Only supported when author `type` is `user`.
          example: 5963c0d619a30a2e00de36b8
          type: string
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user that authored the message or activity. `profile` is
            included in the payload if the `includeFullUser` option is enabled.
      required:
      - type
      type: object
    messageWebhook:
      properties:
        id:
          description: The unique ID of the message.
          example: 5e552ef595e5206375bb835d
          type: string
        received:
          description: A datetime string with the format `YYYY-MM-DDThh:mm:ss.SSSZ`
            representing when Sunshine Conversations received the message.
          example: 2019-03-21T18:48:52.760Z
          type: string
        author:
          $ref: '#/components/schemas/authorWebhook'
        content:
          allOf:
          - $ref: '#/components/schemas/content'
          description: The content of the message.
        source:
          allOf:
          - $ref: '#/components/schemas/source'
          - properties:
              campaign:
                $ref: '#/components/schemas/campaign'
            type: object
        quotedMessage:
          allOf:
          - $ref: '#/components/schemas/quotedMessage'
          description: The quoted message is currently only available for WhatsApp
            and Web Messenger `formResponse` messages.
          nullable: true
        metadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          nullable: true
        deleted:
          description: true if the message serves as a placeholder for one that has
            been deleted.
          nullable: true
          type: boolean
      type: object
    conversationMessageEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationMessageEvent_allOf'
      title: conversation:message
    postbackWebhook:
      properties:
        payload:
          description: The payload associated with the postback.
          type: string
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
      type: object
    conversationPostbackEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationPostbackEvent_allOf'
      title: conversation:postback
    activity:
      allOf:
      - $ref: '#/components/schemas/activityTypes'
      - $ref: '#/components/schemas/activity_allOf'
    conversationReadEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationReadEvent_allOf'
      title: conversation:read
    conversationReferralEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationReferralEvent_allOf'
      title: conversation:referral
    conversationTypingEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/conversationTypingEvent_allOf'
      title: conversation:typing
    switchboardAcceptControl:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/switchboardAcceptControl_allOf'
      title: switchboard:acceptControl
    switchboardAcceptControlFailure:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/switchboardAcceptControlFailure_allOf'
      title: switchboard:acceptControl:failure
    switchboardOfferControl:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/switchboardOfferControl_allOf'
      title: switchboard:offerControl
    switchboardOfferControlFailure:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/switchboardAcceptControlFailure_allOf'
      title: switchboard:offerControl:failure
    switchboardPassControl:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/switchboardPassControl_allOf'
      title: switchboard:passControl
    switchboardPassControlFailure:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/switchboardAcceptControlFailure_allOf'
      title: switchboard:passControl:failure
    userMergeEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/userMergeEvent_allOf'
      title: user:merge
    userUpdateEvent:
      allOf:
      - $ref: '#/components/schemas/eventSubSchema'
      - $ref: '#/components/schemas/userUpdateEvent_allOf'
      title: user:update
    appListFilter:
      properties:
        serviceAccountId:
          description: When specified, lists only the apps that the service account
            has access to.
          type: string
      title: appListFilter
      type: object
    AppKeyCreateBody:
      example:
        displayName: Key 1
      properties:
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: The name of the API key.
          example: Key 1
          nullable: false
      required:
      - displayName
      title: AppKeyCreateBody
      type: object
    conversationListFilter:
      properties:
        userId:
          description: The user's id. One of `userId` or `userExternalId` is required,
            but not both.
          type: string
        userExternalId:
          description: The external Id of the user. One of `userId` or `userExternalId`
            is required, but not both.
          type: string
      title: conversationListFilter
      type: object
    ParticipantResponse:
      description: The created participant.
      example:
        participant:
          unreadCount: 0
          userExternalId: your-own-id
          id: c93bb9c14dde8ffb94564eae
          userId: 42589ad070d43be9b00ff7e5
          lastRead: 2019-01-14T18:55:12.515Z
          clientAssociations:
          - clientId: 42589ad070d43be9b00ff7e5
            type: telegram
          - clientId: 42589ad070d43be9b00ff7e5
            type: telegram
      properties:
        participant:
          $ref: '#/components/schemas/participant'
    integrationListFilter:
      properties:
        types:
          description: Comma-separated list of types to return. If omitted, all types
            are returned.
          example: android,ios
          type: string
      title: integrationListFilter
      type: object
    IntegrationApiKeyListResponse:
      example:
        keys:
        - displayName: My custom key
          id: int_5e4b0f225aca01092928f917
          secret: Ck1LjzzlUzvlCTtqAdQ2z1QukuBTrN3TIx
        - displayName: My custom key
          id: int_5e4b0f225aca01092928f917
          secret: Ck1LjzzlUzvlCTtqAdQ2z1QukuBTrN3TIx
      properties:
        keys:
          description: Integration keys of the supplied integration.
          items:
            $ref: '#/components/schemas/apiKey'
          type: array
    IntegrationApiKey:
      example:
        displayName: My custom key
      properties:
        displayName:
          description: The name of the API key.
          example: My custom key
          type: string
      required:
      - displayName
      title: IntegrationApiKey
      type: object
    ClientResponse:
      example:
        client:
          lastSeen: 2020-08-20T16:13:07.462Z
          avatarUrl: https://openapi-generator.tech
          displayName: Steve
          integrationId: 582dedf230e788746891281a
          externalId: your-own-id
          linkedAt: 2020-06-23T14:33:47.492Z
          raw: '{}'
          id: 5c9a34160c89726709136733
          type: telegram
          status: active
          info: '{}'
      properties:
        client:
          $ref: '#/components/schemas/client'
    inline_object:
      properties:
        code:
          description: The authorization code received via /oauth/authorize
          example: "658965"
          type: string
        grant_type:
          description: Must be set to the string `authorization_code`
          example: authorization_code
          type: string
        client_id:
          description: Your integration’s unique identifier
          example: 5e4af71a81966cfff3ef6550
          type: string
        client_secret:
          description: Your integration’s secret
          example: 5XJ85yjUtRcaQu_pDINblPZb
          type: string
      required:
      - client_id
      - client_secret
      - code
      - grant_type
      type: object
    conversation_allOf:
      properties:
        isDefault:
          description: |
            Whether the conversation is the default conversation for the user. Will be
            true for the first personal conversation created for the user, and false in
            all other cases.
          example: false
          type: boolean
        displayName:
          allOf:
          - $ref: '#/components/schemas/displayName'
          description: |
            A friendly name for the conversation, may be displayed to the business or
            the user.
          example: My conversation
        description:
          description: A short text describing the conversation.
          example: Conversation between Rogers and Carl.
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
        iconUrl:
          description: A custom conversation icon url. The image must be in either
            JPG, PNG, or GIF format
          example: https://www.gravatar.com/image.jpg
          format: uri
          maxLength: 2048
          minLength: 1
          nullable: true
          type: string
        businessLastRead:
          description: |
            A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ
            representing the moment the conversation was last marked as read with
            role business.
          example: 2020-06-23T14:33:47.492Z
          nullable: true
          type: string
        lastUpdatedAt:
          description: |
            A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ
            representing the moment the last message was received in the
            conversation, or the creation time if no messages have been received yet.
          example: 2020-06-26T14:33:47.120Z
          nullable: true
          type: string
    ParticipantWithUserId:
      properties:
        userId:
          description: The id of the user that will be participating in the conversation.
            It will return `404` if the user can’t be found. One of `userId` or `userExternalId`
            is required, but not both.
          example: 42589ad070d43be9b00ff7e5
          type: string
        subscribeSDKClient:
          description: When passed as true, the SDK client of the concerned participant
            will be subscribed to the conversation. The user will start receiving
            push notifications for this conversation right away, without having to
            view the conversation on the SDK beforehand. An SDK client will be created
            for users that don’t already have one. This field is required if the conversation
            is of type `sdkGroup`.
          example: false
          type: boolean
    ParticipantWithUserExternalId:
      properties:
        userExternalId:
          description: The `externalId` of the user that will be participating in
            the conversation. It will return `404` if the user can’t be found. One
            of `userId` or `userExternalId` is required, but not both.
          example: your-own-user-id
          type: string
        subscribeSDKClient:
          description: When passed as true, the SDK client of the concerned participant
            will be subscribed to the conversation. The user will start receiving
            push notifications for this conversation right away, without having to
            view the conversation on the SDK beforehand. An SDK client will be created
            for users that don’t already have one. This field is required if the conversation
            is of type `sdkGroup`.
          example: false
          type: boolean
    ParticipantLeaveBodyUserId:
      properties:
        userId:
          description: |
            The id of the user that will be removed from the conversation. It will
            return 404 if the user can’t be found.
          example: 42589ad070d43be9b00ff7e5
          type: string
    ParticipantLeaveBodyUserExternalId:
      properties:
        userExternalId:
          description: |
            The externalId of the user that will be removed from the conversation. It
            will return 404 if the user can’t be found.
          example: your-own-user-id
          type: string
    ParticipantLeaveBodyParticipantId:
      properties:
        participantId:
          description: |
            The participantId of the user that will be removed from the conversation.
            It will return 404 if the user can’t be found.
          example: 42589ad070d43be9b00ff7e5
          type: string
    extraChannelOptions_messenger:
      description: Messenger channel options.
      properties:
        messenger_extensions:
          default: false
          description: For webview type actions, a boolean value indicating whether
            the URL should be loaded with Messenger Extensions enabled. [More info](https://developers.facebook.com/docs/messenger-platform/send-api-reference/url-button).
          example: false
          type: boolean
        webview_share_button:
          description: For webview type actions, a string value indicating if the
            share button should be hidden. [More Info](https://developers.facebook.com/docs/messenger-platform/reference/buttons/url).
          enum:
          - hide
          type: string
    carouselMessage_displaySettings:
      description: Settings to adjust the carousel layout.
      properties:
        imageAspectRatio:
          description: Specifies how to display all carousel images. Valid values
            are horizontal (default) and square. Only supported in Facebook Messenger,
            Web Messenger, Android SDK and iOS SDK carousels.
          enum:
          - horizontal
          - square
          type: string
    formMessageField_allOf:
      description: |
        Properties that can be expected to receive inside a form message field.
      properties:
        placeholder:
          description: Placeholder text for the field. Form message only.
          maxLength: 128
          minLength: 1
          type: string
        minSize:
          default: 1
          description: The minimum allowed length for the response for a field of
            type text. Form message only.
          maximum: 256
          minimum: 1
          type: integer
        maxSize:
          default: 128
          description: The maximum allowed length for the response for a field of
            type text. Form message only.
          maximum: 256
          minimum: 1
          type: integer
        options:
          description: Array of objects representing options for a field of type select.
          items:
            properties:
              label:
                description: The label of the option. What the option is displayed
                  as on Web Messenger.
                maxLength: 128
                minLength: 1
                type: string
              name:
                description: The name of the field. Must be unique per field.
                maxLength: 128
                minLength: 1
                type: string
            type: object
          maxItems: 200
          type: array
    formResponseMessageField_allOf:
      description: |
        Properties that can be expected to receive inside a form response message field.
      properties:
        quotedMessageId:
          description: The messageId for the form that this response belongs to.
          type: string
          writeOnly: true
    locationMessage_coordinates:
      description: The coordinates of the location.
      properties:
        lat:
          description: Global latitude.
          type: number
        long:
          description: Global longitude.
          type: number
      required:
      - lat
      - long
    locationMessage_location:
      description: Information about the location.
      properties:
        address:
          description: A string representing the address of the location.
          type: string
        name:
          description: A string representing the name of the location.
          type: string
    integrationId:
      properties:
        integrationId:
          description: |
            The id of the integration to deliver the message to. Will return an error if
            the integration does not exist or if the user does not have a client for the
            integration attached to the conversation.
          example: 582dedf230e788746891281a
          type: string
    integrationType:
      properties:
        integrationType:
          description: |
            The type of the integration to deliver the message to. Can be set to `none` if sending a [silent message](https://docs.smooch.io/guide/sending-messages/#silent-messages). Will return an error
            if the user does not have a client of that type attached to the
            conversation.
          example: whatsapp
          type: string
    MessageOverrideApple:
      properties:
        apple:
          $ref: '#/components/schemas/messageOverridePayload'
    MessageOverrideLine:
      properties:
        line:
          $ref: '#/components/schemas/messageOverridePayload'
    MessageOverrideMessenger:
      properties:
        messenger:
          $ref: '#/components/schemas/messageOverridePayload'
    MessageOverrideWhatsapp:
      properties:
        whatsapp:
          $ref: '#/components/schemas/messageOverridePayload'
    activityPost_allOf:
      properties:
        author:
          allOf:
          - $ref: '#/components/schemas/author'
          description: The author of the activity.
    defaultResponder_defaultResponder:
      description: |
        The default responder object.
        <aside class="notice">This property will only be returned in response for <code>get integration</code> and <code>list integration</code> and must not be used in the request body.</aside>
        <aside class="notice">Response will contain only one of the following: <code>defaultResponder</code> or <code>defaultResponderId</code> but never both.</aside>
      properties:
        switchboardId:
          description: The unique ID of the switchboard.
          example: 5e4af71a81966cfff3ef6551
          type: string
        appId:
          description: Identifies the app.
          example: 5e4af71a81966cfff3ef6552
          type: string
        integrationId:
          description: The unique ID of the integration.
          example: 5e4af71a81966cfff3ef6550
          type: string
        integrationType:
          description: The type of the integration.
          type: string
        name:
          description: The name of the switchboard.
          type: string
        deliverStandbyEvents:
          description: Indicates whether the switchboard should deliver standby events.
          type: boolean
        nextSwitchboardIntegrationId:
          description: The unique ID of the next switchboard integration.
          type: string
        messageHistoryCount:
          description: The number of messages to keep in the message history.
          type: number
        inherited:
          description: Indicates whether the switchboard is inherited.
          type: boolean
    android_allOf:
      properties:
        type:
          default: android
          description: "<aside class=\"notice\">Firebase Cloud Messaging has deprecated\
            \ its legacy APIs for HTTP and XMPP. Legacy credentials <code>serverKey</code>\
            \ and <code>senderId</code> will stop working as of June 2024 and must\
            \ be replaced with OAuth 2.0 access token based credentials.</aside>\n\
            \nTo configure an android integration, first visit the [Firebase Console](https://console.firebase.google.com/).\
            \ \nGenerate a private key from the Service accounts tab in the settings.\
            \ \nCopy the `project_id`, `client_email` and `private_key` from the generated\
            \ JSON file and call the create integrations endpoint with this data.\n"
          type: string
        projectId:
          description: Your project ID from your generated private key file.
          example: <project-id>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        clientEmail:
          description: Your client email from your generated private key file.
          example: <client-email>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        privateKey:
          description: Your private key from your generated private key file.
          example: <private-key>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        serverKey:
          deprecated: true
          description: Your server key from the fcm console.
          example: <server-key>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        senderId:
          deprecated: true
          description: Your sender id from the fcm console.
          example: <sender-id>
          minLength: 1
          nullable: true
          type: string
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the android
            integration.
          type: boolean
        attachmentsEnabled:
          description: |
            Allows users to send attachments. By default, the setting is set to true. This setting can only be configured in Zendesk Admin Center.
          readOnly: true
          type: boolean
    apple_allOf:
      properties:
        type:
          default: apple
          description: |
            To configure an Apple Messages for Business integration, acquire the required information and call the Create Integration endpoint.
          type: string
        businessId:
          description: Apple Messages for Business ID.
          example: 2740f141-89c1-515f-07eb-1128dd73491
          type: string
        apiSecret:
          description: Your Apple API secret which is tied to your Messaging Service
            Provider.
          example: QLA//Z13paUYo/2tLReQa-43c5JEAASujGamiY/QTvs=
          type: string
          writeOnly: true
        mspId:
          description: Your Messaging Service Provider ID.
          example: e7e495d5-bf78-531d-baf6-7f419f7fb592
          type: string
      required:
      - apiSecret
      - businessId
      - mspId
    custom_allOf:
      properties:
        type:
          default: custom
          description: |
            To configure a custom integration you need to setup a webhook with a set of triggers and target.
          type: string
        webhooks:
          description: An array of webhooks associated with the custom integration.
          items:
            $ref: '#/components/schemas/webhook'
          maxItems: 1
          minItems: 1
          type: array
      required:
      - webhooks
    instagram_allOf:
      properties:
        type:
          default: instagram
          description: |
            Instagram Direct setup steps:
              - Take note of your Facebook app ID and secret (apps can be created at [developer.facebook.com](https://developer.facebook.com));
              - The Facebook app must have been submitted to Meta for app review with the "pages_manage_metadata" (to retrieve Page Access Tokens for the Pages and apps that the app user administers and to set a webhook), "instagram_basic", and "instagram_manage_messages" (to retrieve basic Instagram account information and send messages) permissions.
              - In order to integrate an Instagram Direct app, you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token.
          type: string
        pageAccessToken:
          description: The Facebook Page Access Token of the Facebook page that is
            linked to your Instagram account.
          example: your_page_access_token
          type: string
          writeOnly: true
        appId:
          description: Your Facebook App ID.
          example: your_facebook_app_id
          type: string
        appSecret:
          description: Your Facebook App secret.
          example: your_facebook_app_secret
          type: string
          writeOnly: true
        businessName:
          description: Your Instagram Business account name
          example: instagram_name
          readOnly: true
          type: string
        businessUsername:
          description: Your Instagram Business unique username
          example: instagram_username
          readOnly: true
          type: string
        pageId:
          description: The ID of the Facebook Page linked to your Instagram Business
            account
          example: "106731941223392"
          readOnly: true
          type: string
        businessId:
          description: The ID of the Instagram Business account
          example: "17841444303043201"
          readOnly: true
          type: string
        username:
          description: The Facebook user's username. This is returned when integrating
            through the Dashboard
          example: facebook_username
          readOnly: true
          type: string
        userId:
          description: The Facebook user's user ID. This is returned when integrating
            through the Dashboard
          example: "100885965124932"
          readOnly: true
          type: string
      required:
      - appId
      - appSecret
      - pageAccessToken
    ios_allOf:
      properties:
        type:
          default: ios
          description: |
            To configure an ios integration, call the create integration endpoint with a base64 encoded Apple Push Notification certificate from the [Apple Developer Portal](https://developer.apple.com/).
          type: string
        certificate:
          description: |
            The binary of your APN certificate base64 encoded. To base64 encode your certificate you can use this command in the terminal:
            `openssl base64 -in YOUR_CERTIFICATE.p12 | tr -d '\n'`
          example: your_APN_certificate
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        password:
          description: The password for your APN certificate.
          example: your_APN_password
          type: string
          writeOnly: true
        production:
          description: The APN environment to connect to (Production, if true, or
            Sandbox). Defaults to value inferred from certificate if not specified.
          type: boolean
        autoUpdateBadge:
          description: Use the unread count of the conversation as the application
            badge.
          type: boolean
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the iOS
            integration.
          type: boolean
        attachmentsEnabled:
          description: |
            Allows users to send attachments. By default, the setting is set to true. This setting can only be configured in Zendesk Admin Center.
          readOnly: true
          type: boolean
    line_allOf:
      properties:
        type:
          default: line
          description: |
            For LINE, each of your customers will need to manually configure a webhook in their LINE configuration page that will point to Sunshine Conversations servers. You must instruct your customers how to configure this manually on their LINE bot page.
            Once you’ve acquired all the required information, call the Create Integration endpoint.
            Then, using the returned integration _id, your customer must set the Callback URL field in their LINE Business Center page.
            The URL should look like the following: `https://app.smooch.io:443/api/line/webhooks/{appId}/{integrationId}`.
          type: string
        channelId:
          description: LINE Channel ID. Can be omitted along with `channelSecret`
            to integrate LINE to setup a webhook before receiving the `channelId`
            and `channelSecret` back from LINE.
          example: "1286564967"
          type: string
        channelSecret:
          description: LINE Channel Secret. Can be omitted along with `channelId`
            to integrate LINE to setup a webhook before receiving the `channelId`
            and `channelSecret` back from LINE.
          example: your_line_channel_secret
          type: string
        channelAccessToken:
          description: LINE Channel Access Token.
          example: your_line_channel_token
          type: string
        serviceCode:
          description: LINE Service Code.
          example: your_line_service_code
          type: string
        switcherSecret:
          description: LINE Switcher Secret.
          example: your_line_switcher_secret
          minLength: 1
          type: string
        qrCodeUrl:
          description: URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
          example: https://qr-official.line.me/M/1O4fb8.png
          type: string
        lineId:
          description: LINE Basic ID. Is automatically set when qrCodeUrl is updated.
          example: 104fb8
          readOnly: true
          type: string
    mailgun_allOf:
      properties:
        type:
          default: mailgun
          description: |
            To configure a Mailgun integration, visit the API Keys tab in the settings page of the Mailgun dashboard and copy your active API key. Call the Create Integration endpoint with your API Key, a domain you have configured in Mailgun, and the incoming address you would like to use. Must have the same domain as the one specified in the domain parameter.
          type: string
        apiKey:
          description: The public API key of your Mailgun account.
          example: key-f265hj32f0sd897lqd2j5keb96784043
          minLength: 1
          type: string
          writeOnly: true
        domain:
          description: The domain used to relay email. This domain must be configured
            and verified in your Mailgun account.
          example: sandbox123.mailgun.org
          minLength: 1
          type: string
        incomingAddress:
          description: Sunshine Conversations will receive all emails sent to this
            address. It will also be used as the Reply-To address.
          example: mytestemail@sandbox123.mailgun.org
          minLength: 1
          type: string
        hideUnsubscribeLink:
          description: A boolean value indicating whether the unsubscribe link should
            be omitted from outgoing emails. When enabled, it is expected that the
            business is providing the user a way to unsubscribe by some other means.
            By default, the unsubscribe link will be included in all outgoing emails.
          type: boolean
        fromAddress:
          description: Email address to use as the From and Reply-To address if it
            must be different from incomingAddress. Only use this option if the address
            that you supply is configured to forward emails to the incomingAddress,
            otherwise user replies will be lost. You must also make sure that the
            domain is properly configured as a mail provider so as to not be flagged
            as spam by the user’s email client. May be unset with null.
          example: test@sandbox123.mailgun.org
          minLength: 1
          nullable: true
          type: string
      required:
      - apiKey
      - domain
      - incomingAddress
    messagebird_allOf:
      properties:
        type:
          default: messagebird
          description: "To configure a MessageBird integration, acquire the accessKey,\
            \ the signingKey and the MessageBird number you would like to use, then\
            \ call the Create Integration endpoint. The response will include the\
            \ integration’s `_id` and `webhookSecret`, which must be used to configure\
            \ the webhook in MessageBird.\nIn the Flow Builder for the MessageBird\
            \ number you’ve used to integrate, add a new step with the following settings:\n\
            - Create a new Call HTTP endpoint with SMS flow.\n- Select your desired\
            \ SMS number for Incoming SMS.\n- Click on Forward to URL and set its\
            \ method to POST.\n- Then, using the integration _id and webhookSecret\
            \ returned from the create integration call, enter the following into\
            \ the URL field: \n`https://app.smooch.io/api/messagebird/webhooks/{appId}/{integrationId}/{webhookSecret}`\n\
            - Select application/json for the Set Content-Type header field.\n- Save\
            \ and publish your changes.\n"
          type: string
        accessKey:
          description: The public API key of your MessageBird account.
          example: 9V2iJmd93kFJ390L9495JCl11
          minLength: 1
          type: string
          writeOnly: true
        signingKey:
          description: The signing key of your MessageBird account. Used to validate
            the webhooks' origin.
          example: Uu6N09Lkdji3820DJIO89I39sl9dJ
          minLength: 1
          type: string
          writeOnly: true
        originator:
          description: Sunshine Conversations will receive all messages sent to this
            phone number.
          example: "12262121021"
          minLength: 1
          type: string
        webhookSecret:
          description: The secret that is used to configure webhooks in MessageBird.
          example: 72ade38394d1da51566cede33bd1e67e
          readOnly: true
          type: string
      required:
      - accessKey
      - originator
      - signingKey
    messenger_allOf:
      properties:
        type:
          default: messenger
          description: |
            Facebook Messenger Setup steps:
            - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com);
            - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions.
            - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token.
          type: string
        pageAccessToken:
          description: A Facebook Page Access Token.
          example: your_access_token
          type: string
        appId:
          description: A Facebook App ID.
          example: your_facebook_app_id
          type: string
        appSecret:
          description: A Facebook App Secret.
          example: your_facebook_app_secret
          type: string
          writeOnly: true
        pageId:
          description: A Facebook page ID.
          example: 123212323432123
          type: number
        pageName:
          description: A Facebook page name.
          example: An Awesome Page
          type: string
      required:
      - appId
      - appSecret
      - pageAccessToken
    telegram_allOf:
      properties:
        type:
          default: telegram
          description: |
            To configure a Telegram integration, acquire the required information from the user and call the Create Integration endpoint.
          type: string
        token:
          description: Telegram Bot Token.
          example: 192033615:AAEuee2FS2JYKWfDlTulfygjaIGJi4s
          minLength: 1
          type: string
          writeOnly: true
        username:
          description: Username of the botId
          readOnly: true
          type: string
        botId:
          description: A human-friendly name used to identify the integration.
          readOnly: true
          type: string
      required:
      - token
    twilio_allOf:
      properties:
        type:
          default: twilio
          description: |
            To configure a Twilio integration, acquire the required information from the user and call the Create Integration endpoint.
          type: string
        accountSid:
          description: Twilio Account SID.
          example: ACa1b4c65ee0722712fab89867cb14eac7
          type: string
        authToken:
          description: Twilio Auth Token.
          example: 160c024303f53049e1e060fd67ca6aefc
          minLength: 1
          type: string
          writeOnly: true
        phoneNumberSid:
          description: SID for specific phone number. One of `messagingServiceSid`
            or `phoneNumberSid` must be provided when creating a Twilio integration.
          example: PN0674df0ecee0c9819bca0ff0bc0a159e
          minLength: 1
          type: string
        messagingServiceSid:
          description: SID for specific messaging service. One of `messagingServiceSid`
            or `phoneNumberSid` must be provided when creating a Twilio integration.
          minLength: 1
          type: string
      required:
      - accountSid
      - authToken
    twitter_allOf:
      properties:
        type:
          default: twitter
          description: |
            To set up a Twitter integration, please follow the steps outlined in the [Twitter Setup Guide](https://docs.smooch.io/guide/twitter/#setup).
          type: string
        tier:
          description: Your Twitter app's tier. Only "enterprise" is supported for
            new integrations.
          enum:
          - enterprise
          type: string
        envName:
          description: The Twitter dev environments label. Only required / used for
            sandbox and premium tiers.
          minLength: 1
          readOnly: true
          type: string
        consumerKey:
          description: The consumer key for your Twitter app.
          example: your_consumer_key
          minLength: 1
          type: string
          writeOnly: true
        consumerSecret:
          description: The consumer key secret for your Twitter app.
          example: your_consumer_secret
          minLength: 1
          type: string
          writeOnly: true
        accessTokenKey:
          description: The access token key obtained from your user via oauth.
          example: your_access_token_key
          minLength: 1
          type: string
          writeOnly: true
        accessTokenSecret:
          description: The access token secret obtained from your user via oauth.
          example: your_access_token_secret
          minLength: 1
          type: string
          writeOnly: true
      required:
      - accessTokenKey
      - accessTokenSecret
      - consumerKey
      - consumerSecret
      - tier
    unity_allOf:
      properties:
        type:
          default: unity
          description: |
            To configure a Unity integration, create an integration with type 'unity' by calling the Create Integration endpoint.
          type: string
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the Unity
            integration.
          type: boolean
        attachmentsEnabled:
          description: |
            Allows users to send attachments. By default, the setting is set to true. This setting can only be configured in Zendesk Admin Center.
          readOnly: true
          type: boolean
    viber_allOf:
      properties:
        type:
          default: viber
          description: |
            To configure a Viber integration, acquire the Viber Public Account token from the user and call the Create Integration endpoint.
          type: string
        token:
          description: Viber Public Account token.
          example: 445da6az1s345z78-dazcczb2542zv51a-e0vc5fva17480im9
          minLength: 1
          type: string
          writeOnly: true
        uri:
          description: Unique URI of the Viber account.
          readOnly: true
          type: string
        accountId:
          description: Unique ID of the Viber account.
          readOnly: true
          type: string
      required:
      - token
    web_allOf:
      properties:
        type:
          default: web
          description: |
            To configure a Web Messenger integration, acquire the required information and call the Create Integration endpoint.
          type: string
        brandColor:
          default: 65758e
          description: |
            This color will be used in the messenger header and the button or tab
            in idle state. Must be a 3 or 6-character hexadecimal color.
          type: string
        fixedIntroPane:
          default: false
          description: |
            When true, the introduction pane will be pinned at the top of the
            conversation instead of scrolling with it.
          type: boolean
        conversationColor:
          default: 0099ff
          description: |
            This color will be used for customer messages, quick replies and
            actions in the footer. Must be a 3 or 6-character hexadecimal color.
          type: string
        actionColor:
          default: 0099ff
          description: |
            This color will be used for call-to-actions inside your messages. Must
            be a 3 or 6-character hexadecimal color.
          type: string
        displayStyle:
          default: button
          description: |
            Choose how the messenger will appear on your website. Must be either
            button or tab.
          type: string
        buttonIconUrl:
          description: |
            With the button style Web Messenger, you have the option of selecting
            your own button icon. The image must be at least 200 x 200 pixels and
            must be in either JPG, PNG, or GIF format.
          example: https://domain.com/images/avatar.png
          nullable: true
          type: string
        buttonWidth:
          default: "58"
          description: |
            With the button style Web Messenger, you have the option of specifying
            the button width.
          type: string
        buttonHeight:
          default: "58"
          description: |
            With the button style Web Messenger, you have the option of specifying
            the button height.
          type: string
        integrationOrder:
          description: |
            Array of integration IDs, order will be reflected in the Web
            Messenger. When set, only integrations from this list will be
            displayed in the Web Messenger. If unset, all integrations will be
            displayed.
          example: '["59fc8466260f48003505228b", "59d79780481d34002b7d3617"]'
          items:
            type: string
          nullable: true
          type: array
        businessName:
          description: A custom business name for the Web Messenger.
          example: Kent Shop
          type: string
        businessIconUrl:
          description: |
            A custom business icon url for the Web Messenger. The image must be at
            least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
          example: https://www.gravatar.com/image.jpg
          type: string
        backgroundImageUrl:
          description: |
            A background image url for the conversation. Image will be tiled to
            fit the window.
          example: https://a-beautiful-tile.png
          type: string
        originWhitelist:
          description: |
            A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted.
            The elements in the list should follow the serialized-origin format from RFC 6454: scheme "://" host [ ":" port ], where scheme is http or https.
          example: https://yourdomain.com
          items:
            type: string
          nullable: true
          type: array
        prechatCapture:
          allOf:
          - $ref: '#/components/schemas/prechatCapture'
          description: |
            Object whose properties can be set to specify the add-on’s options.
            See the
            [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture)
            to learn more about Prechat Capture.
        canUserSeeConversationList:
          description: |
            Allows users to view their list of conversations. By default, the list
            of conversations will be visible. *This setting only applies to apps
            where `settings.multiConvoEnabled` is set to `true`*.
          example: false
          type: boolean
        canUserCreateMoreConversations:
          description: |
            Allows users to create more than one conversation on the web messenger
            integration.
          type: boolean
        attachmentsEnabled:
          description: |
            Allows users to send attachments. By default, the setting is set to true. This setting can only be configured in Zendesk Admin Center.
          readOnly: true
          type: boolean
    whatsapp_allOf:
      properties:
        type:
          default: whatsapp
          description: |
            To configure a WhatsApp integration, use your WhatsApp API Client connection information. Sunshine Conversations can provide WhatsApp API Client hosting for approved brands. See our [WhatsApp guide](https://docs.smooch.io/guide/whatsapp/#whatsapp-api-client) for more details on WhatsApp API Client hosting.
          type: string
        deploymentId:
          description: The Id of the deployment. The integrationId and the appId will
            be added to the deployment. Additionally, the deployment’s status will
            be set to integrated.
          example: 55c8d9758590aa1900b9b9aa
          type: string
        hsmFallbackLanguage:
          default: en_US
          description: Specify a fallback language to use when sending WhatsApp message
            template using the short hand syntax. Defaults to en_US. See WhatsApp
            documentation for more info.
          nullable: true
          type: string
        accountId:
          description: The business ID associated with the WhatsApp account. In combination
            with accountManagementAccessToken, it’s used for Message Template Reconstruction.
          example: your_whatsApp_account_id
          nullable: true
          type: string
        accountManagementAccessToken:
          description: An access token associated with the accountId used to query
            the WhatsApp Account Management API. In combination with accountId, it’s
            used for Message Template Reconstruction.
          example: your_access_token
          nullable: true
          type: string
        phoneNumber:
          description: The phone number that is associated with the deployment of
            this integration, if one exists.
          example: "15144441919"
          nullable: true
          readOnly: true
          type: string
      required:
      - deploymentId
    androidUpdate_allOf:
      properties:
        projectId:
          description: Your project ID from your generated private key file.
          example: <project-id>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        clientEmail:
          description: Your client email from your generated private key file.
          example: <client-email>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        privateKey:
          description: Your private key from your generated private key file.
          example: <private-key>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        serverKey:
          deprecated: true
          description: Your server key from the fcm console.
          example: <server-key>
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        senderId:
          deprecated: true
          description: Your sender id from the fcm console.
          example: <sender-id>
          minLength: 1
          nullable: true
          type: string
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the android
            integration.
          type: boolean
    customUpdate_allOf:
      properties:
        displayName:
          description: A human-friendly name used to identify the integration. `displayName`
            can be unset by changing it to `null`.
          example: My awesome integration
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
    instagramUpdate_allOf:
      properties:
        pageAccessToken:
          description: A Facebook Page Access Token.
          example: your_access_token
          type: string
    iosUpdate_allOf:
      properties:
        certificate:
          description: The binary of your APN certificate base64 encoded.
          example: your_APN_certificate
          minLength: 1
          nullable: true
          type: string
          writeOnly: true
        password:
          description: The password for your APN certificate.
          example: your_APN_password
          type: string
          writeOnly: true
        production:
          description: The APN environment to connect to (Production, if true, or
            Sandbox). Defaults to value inferred from certificate if not specified.
          type: boolean
        autoUpdateBadge:
          description: Use the unread count of the conversation as the application
            badge.
          type: boolean
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the iOS
            integration.
          type: boolean
    mailgunUpdate_allOf:
      properties:
        hideUnsubscribeLink:
          description: A boolean value indicating whether the unsubscribe link should
            be omitted from outgoing emails. When enabled, it is expected that the
            business is providing the user a way to unsubscribe by some other means.
            By default, the unsubscribe link will be included in all outgoing emails.
          type: boolean
        fromAddress:
          description: Email address to use as the From and Reply-To address if it
            must be different from incomingAddress. Only use this option if the address
            that you supply is configured to forward emails to the incomingAddress,
            otherwise user replies will be lost. You must also make sure that the
            domain is properly configured as a mail provider so as to not be flagged
            as spam by the user’s email client. May be unset with null.
          example: test@sandbox123.mailgun.org
          minLength: 1
          nullable: true
          type: string
    unityUpdate_allOf:
      properties:
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the Unity
            integration.
          type: boolean
    webUpdate_allOf:
      description: |
        To configure a Web Messenger integration, acquire the required information and call the Create Integration endpoint.
      properties:
        brandColor:
          default: 65758e
          description: This color will be used in the messenger header and the button
            or tab in idle state. Must be a 3 or 6-character hexadecimal color.
          type: string
        fixedIntroPane:
          default: false
          description: When true, the introduction pane will be pinned at the top
            of the conversation instead of scrolling with it.
          type: boolean
        conversationColor:
          default: 0099ff
          description: This color will be used for customer messages, quick replies
            and actions in the footer. Must be a 3 or 6-character hexadecimal color.
          type: string
        actionColor:
          default: 0099ff
          description: This color will be used for call-to-actions inside your messages.
            Must be a 3 or 6-character hexadecimal color.
          type: string
        displayStyle:
          default: button
          description: Choose how the messenger will appear on your website. Must
            be either button or tab.
          type: string
        buttonIconUrl:
          description: With the button style Web Messenger, you have the option of
            selecting your own button icon. The image must be at least 200 x 200 pixels
            and must be in either JPG, PNG, or GIF format.
          nullable: true
          type: string
        buttonWidth:
          default: "58"
          description: With the button style Web Messenger, you have the option of
            specifying the button width.
          type: string
        buttonHeight:
          default: "58"
          description: With the button style Web Messenger, you have the option of
            specifying the button height.
          type: string
        integrationOrder:
          description: Array of integration IDs, order will be reflected in the Web
            Messenger. When set, only integrations from this list will be displayed
            in the Web Messenger. If unset, all integrations will be displayed.
          example:
          - 59fc8466260f48003505228b
          - 59d79780481d34002b7d3617
          items:
            type: string
          nullable: true
          type: array
        businessName:
          description: A custom business name for the Web Messenger.
          example: Kent Shop
          type: string
        businessIconUrl:
          description: A custom business icon url for the Web Messenger. The image
            must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF
            format.
          example: https://www.gravatar.com/image.jpg
          type: string
        backgroundImageUrl:
          description: A background image url for the conversation. Image will be
            tiled to fit the window.
          example: https://a-beautiful-tile.png
          type: string
        originWhitelist:
          description: |
            A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted.
            The elements in the list should follow the serialized-origin format from RFC 6454: scheme "://" host [ ":" port ], where scheme is http or https.
          items:
            type: string
          nullable: true
          type: array
        prechatCapture:
          allOf:
          - $ref: '#/components/schemas/prechatCapture'
          description: Object whose properties can be set to specify the add-on’s
            options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture)
            to learn more about Prechat Capture.
        canUserCreateMoreConversations:
          description: Allows users to create more than one conversation on the web
            messenger integration.
          type: boolean
    whatsAppUpdate_allOf:
      properties:
        hsmFallbackLanguage:
          default: en_US
          description: Specify a fallback language to use when sending WhatsApp message
            template using the short hand syntax. Defaults to en_US. See WhatsApp
            documentation for more info.
          nullable: true
          type: string
        accountId:
          description: The business ID associated with the WhatsApp account. In combination
            with accountManagementAccessToken, it’s used for Message Template Reconstruction.
          example: your_whatsApp_account_id
          nullable: true
          type: string
        accountManagementAccessToken:
          description: An access token associated with the accountId used to query
            the WhatsApp Account Management API. In combination with accountId, it’s
            used for Message Template Reconstruction.
          example: your_access_token
          nullable: true
          type: string
    user_allOf:
      properties:
        signedUpAt:
          allOf:
          - $ref: '#/components/schemas/signedUpAt'
        profile:
          allOf:
          - $ref: '#/components/schemas/profile'
        metadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          nullable: false
        identities:
          description: The user's connected identities.
          items:
            $ref: '#/components/schemas/identity'
          readOnly: true
          type: array
    matchCriteriaMailgun_allOf:
      description: The set of criteria used to determine the user's identity on a
        third-party channel.
      properties:
        type:
          default: mailgun
          description: The channel type.
          type: string
        address:
          description: The user’s email address.
          example: steveb@channel5.com
          type: string
        subject:
          default: New message from {appName}
          description: May be specified to set the subject for the outgoing email.
          type: string
      required:
      - address
    matchCriteriaMessagebird_allOf:
      description: The set of criteria used to determine the user's identity on a
        third-party channel.
      properties:
        type:
          default: messagebird
          description: The channel type.
          type: string
        phoneNumber:
          description: |
            The user’s phone number. It must contain the + prefix and the country code.
            Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368.
            Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368.
          example: +15550001234
          type: string
      required:
      - phoneNumber
    matchCriteriaTwilio_allOf:
      description: The set of criteria used to determine the user's identity on a
        third-party channel.
      properties:
        type:
          default: twilio
          description: The channel type.
          type: string
        phoneNumber:
          description: |
            The user’s phone number. It must contain the + prefix and the country code.
            Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368.
            Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368.
          example: +15550001234
          type: string
      required:
      - phoneNumber
    matchCriteriaWhatsapp_allOf:
      description: The set of criteria used to determine the user's identity on a
        third-party channel.
      properties:
        type:
          default: whatsapp
          description: The channel type.
          type: string
        phoneNumber:
          description: |
            The user’s phone number. It must contain the + prefix and the country code.
            Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368.
            Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368.
          example: +15550001234
          type: string
      required:
      - phoneNumber
    Confirmation:
      description: The confirmation options of the link request.
      properties:
        type:
          description: The type of confirmation.
          enum:
          - immediate
          - userActivity
          - prompt
          type: string
        message:
          allOf:
          - $ref: '#/components/schemas/messagePost'
          description: The message used to reach out to the user, if desired. Messages
            sent via this method can only be of type text and image. If actions are
            included they can only be of type link. The confirmation message will
            not be added to the user’s conversation.
      required:
      - type
    Target:
      description: The target conversation to attach the client to.
      properties:
        conversationId:
          description: The conversation ID of the target conversation.
          example: 029c31f25a21b47effd7be90
          type: string
      required:
      - conversationId
    clientAddEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: |
            The conversation associated with the creation of the client. This field is only present
            when the reason is `channelLinking` and when attaching the client to a specific conversation.
          nullable: true
        user:
          allOf:
          - $ref: '#/components/schemas/userTruncated'
          description: The user associated with the client.
        client:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The client that was just created.
        reason:
          description: |
            The reason for which the client was added.
            * `channelLinking` - The client was created as a result of initiating a channel link.
            * `sdkLogin` - The client was created as a result of logging into an SDK device.
            * `authCode` - The client was created as a result of initializing an SDK client with an `authCode`.
          enum:
          - channelLinking
          - sdkLogin
          - authCode
          type: string
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWebhook'
          description: The source where this event originated from. This could be
            the API or an SDK device.
    clientAddEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/clientAddEvent_allOf_payload'
    clientRemoveEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: |
            The conversation associated with the removal of the client. This field is only present
            when the reason is `theft`, `linkCancelled` or `linkFailed`.
            Note that for the `theft` reason, the conversation will not be present if it has been deleted.
          nullable: true
        user:
          allOf:
          - $ref: '#/components/schemas/userTruncated'
          description: The user associated with the client.
        client:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The removed client.
        reason:
          description: |
            The reason for which the client was removed.
            * `api` - The client was removed using the API.
            * `linkCancelled` - The user cancelled a channel link.
            * `linkFailed` - The client was removed after a channel link attempt failed.
            * `sdk` - The client was removed using the SDK.
            * `theft` - The client was transferred to another user due to a channel link.
          enum:
          - api
          - linkCancelled
          - linkFailed
          - sdk
          - theft
          type: string
        error:
          description: Object containing details of what went wrong. This field will
            only be present when the reason is `linkCancelled` or `linkFailed`.
          nullable: true
          type: object
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWebhook'
          description: The source where this event originated from. This could be
            the API or an SDK device.
    clientRemoveEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/clientRemoveEvent_allOf_payload'
    clientUpdateEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation which triggered a change in the client.
        user:
          allOf:
          - $ref: '#/components/schemas/userTruncated'
          description: The user associated with the client.
        client:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The updated client.
        reason:
          description: |
            The reason for which the client was updated.
            * `confirmed` - The client is now active and ready to use.
            * `blocked` - The user has unsubscribed from the conversation.
            * `unblocked` - A previously unsubscribed user resubscribed to the conversation.
            * `matched` - The channel found a user that matches the information provided.
          enum:
          - confirmed
          - blocked
          - unblocked
          - matched
          type: string
    clientUpdateEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/clientUpdateEvent_allOf_payload'
    sourceWithCampaignWebhook_allOf:
      properties:
        campaign:
          $ref: '#/components/schemas/campaign'
    referral_details:
      description: Nested object containing additional information.
      nullable: true
      properties:
        source:
          description: The source of the referral - MESSENGER_CODE, ADS etc…
          example: MESSENGER_CODE
          type: string
        type:
          description: The type of referral, typically OPEN-THREAD.
          example: OPEN-THREAD
          type: string
        adId:
          description: If the referral came from an ad, this field will be present
            with the ad’s Id.
          example: "4216212847577"
          nullable: true
          type: string
    conversationCreateEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation that was created.
        creationReason:
          description: |
            The reason why the conversation was created, if applicable.
            * `linkRequest` - The conversation was created in order to generate a link request to transfer the user to a different channel.
            * `message` - The conversation was created because a message was sent.
            * `none` - The conversation was not created for a specific purpose. Used primarily when a conversation is created via the Create Conversation API.
            * `notification` - The conversation was created by a call to the Notification API.
            * `prechatCapture` - The conversation was created because the user completed a prechat capture form in the Web Messenger.
            * `startConversation` - The conversation was created because of a call to the startConversation API on one of the SDK integrations, or a start conversation event was triggered from a messaging channel.
            * `proactiveMessaging` - The conversation was created because the user interacted with a campaign.
          enum:
          - linkRequest
          - message
          - none
          - notification
          - prechatCapture
          - startConversation
          - proactiveMessaging
          type: string
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWithCampaignWebhook'
          description: The source of the creation.
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user associated with the conversation. Only present if
            the created conversation was of type personal. For sdkGroup conversations,
            the list of participants can be fetched using the List Participants API,
            if required.
          nullable: true
        referral:
          allOf:
          - $ref: '#/components/schemas/referral'
          description: Referral information, if applicable.
          nullable: true
    conversationCreateEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationCreateEvent_allOf_payload'
    conversationJoinEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation in which the user was added.
        user:
          allOf:
          - $ref: '#/components/schemas/userTruncated'
          description: The user that joined the conversation.
    conversationJoinEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationJoinEvent_allOf_payload'
    conversationLeaveEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation in which the user was removed.
        user:
          allOf:
          - $ref: '#/components/schemas/userTruncated'
          description: The user that left the conversation.
    conversationLeaveEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationLeaveEvent_allOf_payload'
    conversationRemoveEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation that was deleted.
    conversationRemoveEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationRemoveEvent_allOf_payload'
    conversationMessageDeliveryPayload_message:
      description: The message that was sent.
      properties:
        id:
          description: A string representing the ID of the message.
          type: string
    conversationMessageDeliveryPayload_destination:
      description: A nested object representing the destination of the message.
      properties:
        type:
          description: An identifier for the channel to which a message was sent to.
            May include one of "web", "ios", "android", "messenger", "viber", "telegram",
            "wechat", "line", "twilio", "api", "notification", or any other channel.
          type: string
        integrationId:
          description: Identifier indicating which integration the message was sent
            to.
          type: string
    conversationMessageDeliveryPayload_externalMessages:
      properties:
        id:
          description: A string representing the ID of the external message.
          type: string
    conversationMessageDeliveryChannelEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationMessageDeliveryPayload'
    conversationMessageDeliveryFailureEvent_allOf:
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/conversationMessageDeliveryPayload'
          - properties:
              error:
                description: A nested object representing the error associated with
                  the delivery failure.
                properties:
                  code:
                    description: A string representing the error code associated with
                      the error.
                    type: string
                  message:
                    description: The description associated with the error.
                    type: string
                type: object
            type: object
    conversationMessageEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation in which the message was sent.
        message:
          allOf:
          - $ref: '#/components/schemas/messageWebhook'
          description: The message that was sent.
        recentNotifications:
          description: Messages sent with the Notification API since the last user
            message.
          items:
            $ref: '#/components/schemas/messageWebhook'
          type: array
    conversationMessageEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationMessageEvent_allOf_payload'
    conversationPostbackEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        postback:
          allOf:
          - $ref: '#/components/schemas/postbackWebhook'
          description: The postback associated with the event.
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation linked to the postback.
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user that triggered the postback.
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWithCampaignWebhook'
          description: The source of the postback.
    conversationPostbackEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationPostbackEvent_allOf_payload'
    activity_allOf:
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWebhook'
          description: The source of the activity.
        author:
          $ref: '#/components/schemas/authorWebhook'
    conversationReadEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation in which the message was read.
        activity:
          allOf:
          - $ref: '#/components/schemas/activity'
          - properties:
              type:
                default: conversation:read
                description: The type of activity.
                type: string
            type: object
          description: The activity that was sent.
    conversationReadEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationReadEvent_allOf_payload'
    conversationReferralEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation a user lands in after being referred. See
            the <a href="https://docs.smooch.io/guide/conversation-referrals/">conversation
            referrals</a> guide for more details.
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user associated with the conversation.
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWithCampaignWebhook'
          description: The source of the referral.
        referral:
          allOf:
          - $ref: '#/components/schemas/referral'
    conversationReferralEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationReferralEvent_allOf_payload'
    conversationTypingEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation in which the activity was sent.
        activity:
          allOf:
          - $ref: '#/components/schemas/activity'
          - properties:
              type:
                description: The type of activity.
                type: string
            type: object
          description: The activity that was sent.
    conversationTypingEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/conversationTypingEvent_allOf_payload'
    switchboardAcceptControl_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation from which the switchboard event was fired.
            Will include an `activeSwitchboardIntegration` representing the integration
            that has just accepted control.
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
    switchboardAcceptControl_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/switchboardAcceptControl_allOf_payload'
    switchboardAcceptControlFailure_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        error:
          description: Object containing details of what went wrong.
          type: object
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation from which the switchboard event was fired.
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
    switchboardAcceptControlFailure_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/switchboardAcceptControlFailure_allOf_payload'
    switchboardOfferControl_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation from which the switchboard event was fired.
            On success, the payload will include an `activeSwitchboardIntegration`,
            representing the integration from which control is being offered, and
            a `pendingSwitchboardIntegration`, representing the integration being
            offered control.
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
    switchboardOfferControl_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/switchboardOfferControl_allOf_payload'
    switchboardPassControl_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        conversation:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation from which the switchboard event was fired.
            On success, the payload will include an `activeSwitchboardIntegration`,
            representing the switchboard integration that is now in control of the
            conversation.
        metadata:
          description: "Flat object containing custom properties. Strings, numbers\
            \ and booleans \nare the only supported format that can be passed to metadata.\n\
            The metadata is limited to 4KB in size.\n"
          example:
            lang: en-ca
          nullable: true
          type: object
    switchboardPassControl_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/switchboardPassControl_allOf_payload'
    userMergeEvent_allOf_payload_mergedUsers:
      description: Contains information about the users that were merged together.
      properties:
        surviving:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user that now represents the merged user object.
        discarded:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The user that was unified into the surviving user object.
    userMergeEvent_allOf_payload_mergedConversations:
      description: Contains information about the conversations that were merged together
        as a result of the operation, if applicable. If no conversations were merged,
        this property is omitted.
      nullable: true
      properties:
        surviving:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation that now represents the merged conversation
            object.
        discarded:
          allOf:
          - $ref: '#/components/schemas/conversationTruncated'
          description: The conversation that was unified into the surviving conversation
            object.
    userMergeEvent_allOf_payload_mergedClients:
      description: Contains information about the clients that were merged together
        as a result of the operation, if applicable. If no clients were merged, this
        property is omitted.
      nullable: true
      properties:
        surviving:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The client that already existed before the merge started.
        discarded:
          allOf:
          - $ref: '#/components/schemas/client'
          description: The pending client that was discarded during the merge event.
    userMergeEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        mergedUsers:
          $ref: '#/components/schemas/userMergeEvent_allOf_payload_mergedUsers'
        mergedConversations:
          $ref: '#/components/schemas/userMergeEvent_allOf_payload_mergedConversations'
        mergedClients:
          $ref: '#/components/schemas/userMergeEvent_allOf_payload_mergedClients'
        discardedMetadata:
          allOf:
          - $ref: '#/components/schemas/metadata'
          description: A flat object with the set of metadata properties that were
            discarded when merging the two users. This should contain values only
            if the combined metadata fields exceed the 4KB limit.
          nullable: true
        reason:
          description: |
            The reason for which the users merged.
            * `api` - The users were merged using the API.
            * `channelLinking` - The users were merged as a result of initiating a channel link.
            * `sdkLogin` - The users were merged as a result of logging into an SDK device.
          enum:
          - api
          - channelLinking
          - sdkLogin
          type: string
    userMergeEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/userMergeEvent_allOf_payload'
    userUpdateEvent_allOf_payload:
      description: The payload of the event. The contents of this object depend on
        the type of event.
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/user'
          description: The updated user.
        reason:
          description: |
            The reason why the user was updated, if applicable.
            * `authentication` - An anonymous user became an [identified](https://docs.smooch.io/guide/intro-to-users/) user.
            * `localeDetection` - A user was updated as a result of automated locale detection on messages sent.
          enum:
          - authentication
          - localeDetection
          type: string
        source:
          allOf:
          - $ref: '#/components/schemas/sourceWebhook'
          description: The source of the creation.
    userUpdateEvent_allOf:
      properties:
        payload:
          $ref: '#/components/schemas/userUpdateEvent_allOf_payload'
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    basicAuth:
      scheme: basic
      type: http
x-webhooks:
  Webhook Event:
    post:
      tags:
      - Webhooks
      description: |
        A webhook payload contains an array of events, which may or may not originate from the same user
        or conversation. When processing webhook payloads, your application should take care to process
        each event in the array.
      summary: Webhook Events
      operationId: eventWebhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app:
                  $ref: '#/components/schemas/appSubSchema'
                webhook:
                  $ref: '#/components/schemas/webhookSubSchema'
                events:
                  type: array
                  description: The list of events that occurred.
                  items:
                    anyOf:
                    - $ref: '#/components/schemas/clientAddEvent'
                    - $ref: '#/components/schemas/clientRemoveEvent'
                    - $ref: '#/components/schemas/clientUpdateEvent'
                    - $ref: '#/components/schemas/conversationCreateEvent'
                    - $ref: '#/components/schemas/conversationJoinEvent'
                    - $ref: '#/components/schemas/conversationLeaveEvent'
                    - $ref: '#/components/schemas/conversationRemoveEvent'
                    - $ref: '#/components/schemas/conversationMessageDeliveryChannelEvent'
                    - $ref: '#/components/schemas/conversationMessageDeliveryFailureEvent'
                    - $ref: '#/components/schemas/conversationMessageDeliveryUserEvent'
                    - $ref: '#/components/schemas/conversationMessageEvent'
                    - $ref: '#/components/schemas/conversationPostbackEvent'
                    - $ref: '#/components/schemas/conversationReadEvent'
                    - $ref: '#/components/schemas/conversationReferralEvent'
                    - $ref: '#/components/schemas/conversationTypingEvent'
                    - $ref: '#/components/schemas/switchboardAcceptControl'
                    - $ref: '#/components/schemas/switchboardAcceptControlFailure'
                    - $ref: '#/components/schemas/switchboardOfferControl'
                    - $ref: '#/components/schemas/switchboardOfferControlFailure'
                    - $ref: '#/components/schemas/switchboardPassControl'
                    - $ref: '#/components/schemas/switchboardPassControlFailure'
                    - $ref: '#/components/schemas/userMergeEvent'
                    - $ref: '#/components/schemas/userUpdateEvent'
            examples:
              client:add:
                $ref: '#/components/examples/clientAddEvent'
              client:remove:
                $ref: '#/components/examples/clientRemoveEvent'
              client:update:
                $ref: '#/components/examples/clientUpdateEvent'
              conversation:create:
                $ref: '#/components/examples/conversationCreateEvent'
              conversation:join:
                $ref: '#/components/examples/conversationJoinEvent'
              conversation:leave:
                $ref: '#/components/examples/conversationLeaveEvent'
              conversation:remove:
                $ref: '#/components/examples/conversationRemoveEvent'
              conversation:message:delivery:channel:
                $ref: '#/components/examples/conversationMessageDeliveryChannelEvent'
              conversation:message:delivery:failure:
                $ref: '#/components/examples/conversationMessageDeliveryFailureEvent'
              conversation:message:delivery:user:
                $ref: '#/components/examples/conversationMessageDeliveryUserEvent'
              conversation:message:
                $ref: '#/components/examples/conversationMessageEvent'
              conversation:postback:
                $ref: '#/components/examples/conversationPostbackEvent'
              conversation:read:
                $ref: '#/components/examples/conversationReadEvent'
              conversation:referral:
                $ref: '#/components/examples/conversationReferralEvent'
              conversation:typing:
                $ref: '#/components/examples/conversationTypingEvent'
              switchboard:acceptControl:
                $ref: '#/components/examples/switchboardAcceptControlEvent'
              switchboard:acceptControl:failure:
                $ref: '#/components/examples/switchboardAcceptControlFailureEvent'
              switchboard:offerControl:
                $ref: '#/components/examples/switchboardOfferControlEvent'
              switchboard:offerControl:failure:
                $ref: '#/components/examples/switchboardOfferControlFailureEvent'
              switchboard:passControl:
                $ref: '#/components/examples/switchboardPassControlEvent'
              switchboard:passControl:failure:
                $ref: '#/components/examples/switchboardPassControlFailureEvent'
              user:merge:
                $ref: '#/components/examples/userMergeEvent'
              user:update:
                $ref: '#/components/examples/userUpdateEvent'
      responses:
        "200":
          description: Ok
x-tagGroups:
- name: Account Provisioning
  tags:
  - Apps
  - App Keys
- name: Attachments
  tags:
  - Attachments
- name: Conversations
  tags:
  - Conversations
  - Participants
  - Messages
  - Activities
  - Switchboard Actions
- name: Integrations
  tags:
  - Integrations
  - Webhooks
  - CustomIntegrationApiKeys
- name: Switchboards
  tags:
  - Switchboards
  - Switchboard Integrations
- name: Users
  tags:
  - Users
  - Clients
  - Devices
- name: Sunshine Conversations Connect
  tags:
  - Sunshine Conversations Connect
  - OAuth Endpoints
- name: Changelog
  tags:
  - Changelog

